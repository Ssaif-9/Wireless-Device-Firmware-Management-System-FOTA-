
FOTA_ACK_MainECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000185a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000185a  000018ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800070  00800070  000018fe  2**0
                  ALLOC
  3 .stab         000023d0  00000000  00000000  00001900  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000776  00000000  00000000  00003cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00004448  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ef1  00000000  00000000  00004648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a63  00000000  00000000  00006539  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001235  00000000  00000000  00006f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c8  00000000  00000000  000081d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008eb  00000000  00000000  0000889c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001820  00000000  00000000  00009187  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000a9a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__vector_1>
       8:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__vector_2>
       c:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__vector_13>
      38:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__vector_14>
      3c:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 00 	call	0xae	; 0xae <main>
      8a:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ACK_A>:
		
	}	  
}
void ACK_A(void)
{
	UART_TransmiteChar('A');
      92:	81 e4       	ldi	r24, 0x41	; 65
      94:	0e 94 d5 06 	call	0xdaa	; 0xdaa <UART_TransmiteChar>
	LCD_GoToLocation(3,2);
      98:	83 e0       	ldi	r24, 0x03	; 3
      9a:	90 e0       	ldi	r25, 0x00	; 0
      9c:	62 e0       	ldi	r22, 0x02	; 2
      9e:	70 e0       	ldi	r23, 0x00	; 0
      a0:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_GoToLocation>
	LCD_sendChar('A');
      a4:	81 e4       	ldi	r24, 0x41	; 65
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_sendChar>
	
}
      ac:	08 95       	ret

000000ae <main>:
#include "../MCAL/G_INT/GLBI_private.h"

void ACK_A (void);

int main(void)
{
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
      b2:	0f 92       	push	r0
      b4:	cd b7       	in	r28, 0x3d	; 61
      b6:	de b7       	in	r29, 0x3e	; 62
	u8 FileSize;
	u8 Ack='A';
	u8 NotifyFlag;
	u8 Record='0';
	
	GLBI_Enable();
      b8:	0e 94 bc 06 	call	0xd78	; 0xd78 <GLBI_Enable>
	UART_init();
      bc:	0e 94 c0 06 	call	0xd80	; 0xd80 <UART_init>
	LCD_init();
      c0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_init>
	
	EXTI_Enable(EXTI_INT0,EXTI_RISING_EDGE);
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	60 e0       	ldi	r22, 0x00	; 0
      c8:	0e 94 b1 05 	call	0xb62	; 0xb62 <EXTI_Enable>
	
	EXTI_SetCallBackInt0(&ACK_A);
      cc:	89 e4       	ldi	r24, 0x49	; 73
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	0e 94 2c 06 	call	0xc58	; 0xc58 <EXTI_SetCallBackInt0>
	
    while(1)
    {
	
		UART_ReceiveChar(&NOTI);
      d4:	ce 01       	movw	r24, r28
      d6:	01 96       	adiw	r24, 0x01	; 1
      d8:	0e 94 cd 06 	call	0xd9a	; 0xd9a <UART_ReceiveChar>
		LCD_sendChar(NOTI);
      dc:	89 81       	ldd	r24, Y+1	; 0x01
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_sendChar>
		
		if (NOTI=='N')
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	8e 34       	cpi	r24, 0x4E	; 78
      e8:	a9 f7       	brne	.-22     	; 0xd4 <main+0x26>
		{
			UART_TransmiteChar(Accept);
      ea:	89 e7       	ldi	r24, 0x79	; 121
      ec:	0e 94 d5 06 	call	0xdaa	; 0xdaa <UART_TransmiteChar>
			LCD_GoToLocation(1,2);
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	62 e0       	ldi	r22, 0x02	; 2
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_GoToLocation>
			LCD_sendChar(Accept);
      fc:	89 e7       	ldi	r24, 0x79	; 121
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_sendChar>
     104:	e7 cf       	rjmp	.-50     	; 0xd4 <main+0x26>

00000106 <private_WriteHalfPort>:
{
	LCD_sendComnd(ShiftCmnd);
}

void private_WriteHalfPort (u8 Value)
{
     106:	cf 93       	push	r28
     108:	c8 2f       	mov	r28, r24
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit0)) ? (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_HIGH));
     10a:	80 fd       	sbrc	r24, 0
     10c:	06 c0       	rjmp	.+12     	; 0x11a <private_WriteHalfPort+0x14>
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	64 e0       	ldi	r22, 0x04	; 4
     112:	40 e0       	ldi	r20, 0x00	; 0
     114:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
     118:	05 c0       	rjmp	.+10     	; 0x124 <private_WriteHalfPort+0x1e>
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	64 e0       	ldi	r22, 0x04	; 4
     11e:	41 e0       	ldi	r20, 0x01	; 1
     120:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit1)) ? (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_HIGH));
     124:	8c 2f       	mov	r24, r28
     126:	86 95       	lsr	r24
     128:	80 fd       	sbrc	r24, 0
     12a:	06 c0       	rjmp	.+12     	; 0x138 <private_WriteHalfPort+0x32>
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	65 e0       	ldi	r22, 0x05	; 5
     130:	40 e0       	ldi	r20, 0x00	; 0
     132:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
     136:	05 c0       	rjmp	.+10     	; 0x142 <private_WriteHalfPort+0x3c>
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	65 e0       	ldi	r22, 0x05	; 5
     13c:	41 e0       	ldi	r20, 0x01	; 1
     13e:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit2)) ? (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_HIGH));
     142:	8c 2f       	mov	r24, r28
     144:	86 95       	lsr	r24
     146:	86 95       	lsr	r24
     148:	80 fd       	sbrc	r24, 0
     14a:	06 c0       	rjmp	.+12     	; 0x158 <private_WriteHalfPort+0x52>
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	66 e0       	ldi	r22, 0x06	; 6
     150:	40 e0       	ldi	r20, 0x00	; 0
     152:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
     156:	05 c0       	rjmp	.+10     	; 0x162 <private_WriteHalfPort+0x5c>
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	66 e0       	ldi	r22, 0x06	; 6
     15c:	41 e0       	ldi	r20, 0x01	; 1
     15e:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit3)) ? (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_HIGH));
     162:	c6 95       	lsr	r28
     164:	c6 95       	lsr	r28
     166:	c6 95       	lsr	r28
     168:	c0 fd       	sbrc	r28, 0
     16a:	06 c0       	rjmp	.+12     	; 0x178 <private_WriteHalfPort+0x72>
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	67 e0       	ldi	r22, 0x07	; 7
     170:	40 e0       	ldi	r20, 0x00	; 0
     172:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
     176:	05 c0       	rjmp	.+10     	; 0x182 <private_WriteHalfPort+0x7c>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	67 e0       	ldi	r22, 0x07	; 7
     17c:	41 e0       	ldi	r20, 0x01	; 1
     17e:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
}
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <LCD_sendComnd>:
	
	#endif
}

void LCD_sendComnd(u8 Cmnd)
{
     186:	cf 93       	push	r28
     188:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	61 e0       	ldi	r22, 0x01	; 1
     18e:	40 e0       	ldi	r20, 0x00	; 0
     190:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	62 e0       	ldi	r22, 0x02	; 2
     198:	40 e0       	ldi	r20, 0x00	; 0
     19a:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd>>4);                                    //PORTA_REG= (PORTA_REG & 0x0f) | (Cmnd & 0xf0)
     19e:	8c 2f       	mov	r24, r28
     1a0:	82 95       	swap	r24
     1a2:	8f 70       	andi	r24, 0x0F	; 15
     1a4:	0e 94 83 00 	call	0x106	; 0x106 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	63 e0       	ldi	r22, 0x03	; 3
     1ac:	41 e0       	ldi	r20, 0x01	; 1
     1ae:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b2:	8f e9       	ldi	r24, 0x9F	; 159
     1b4:	9f e0       	ldi	r25, 0x0F	; 15
     1b6:	01 97       	sbiw	r24, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_sendComnd+0x30>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_sendComnd+0x36>
     1bc:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	63 e0       	ldi	r22, 0x03	; 3
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd);                                      //PORTA_REG= (PORTA_REG & 0x0f) | ((Cmnd & 0xf0) <<4)
     1c8:	8c 2f       	mov	r24, r28
     1ca:	0e 94 83 00 	call	0x106	; 0x106 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	63 e0       	ldi	r22, 0x03	; 3
     1d2:	41 e0       	ldi	r20, 0x01	; 1
     1d4:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
     1d8:	8f e9       	ldi	r24, 0x9F	; 159
     1da:	9f e0       	ldi	r25, 0x0F	; 15
     1dc:	01 97       	sbiw	r24, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_sendComnd+0x56>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_sendComnd+0x5c>
     1e2:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	63 e0       	ldi	r22, 0x03	; 3
     1e8:	40 e0       	ldi	r20, 0x00	; 0
     1ea:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
	
}
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <LCD_init>:

void LCD_init(void)
{
	#if   LCD_MODE == LCD_FourBitMode 
	//SET PIN AS OUTPUT
	DIO_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	41 e0       	ldi	r20, 0x01	; 1
     1f8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	62 e0       	ldi	r22, 0x02	; 2
     200:	41 e0       	ldi	r20, 0x01	; 1
     202:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	63 e0       	ldi	r22, 0x03	; 3
     20a:	41 e0       	ldi	r20, 0x01	; 1
     20c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <DIO_SetPinDirection>
	
	
	DIO_SetPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	64 e0       	ldi	r22, 0x04	; 4
     214:	41 e0       	ldi	r20, 0x01	; 1
     216:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	65 e0       	ldi	r22, 0x05	; 5
     21e:	41 e0       	ldi	r20, 0x01	; 1
     220:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	66 e0       	ldi	r22, 0x06	; 6
     228:	41 e0       	ldi	r20, 0x01	; 1
     22a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	67 e0       	ldi	r22, 0x07	; 7
     232:	41 e0       	ldi	r20, 0x01	; 1
     234:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <DIO_SetPinDirection>
     238:	8f e7       	ldi	r24, 0x7F	; 127
     23a:	95 eb       	ldi	r25, 0xB5	; 181
     23c:	a1 e0       	ldi	r26, 0x01	; 1
     23e:	81 50       	subi	r24, 0x01	; 1
     240:	90 40       	sbci	r25, 0x00	; 0
     242:	a0 40       	sbci	r26, 0x00	; 0
     244:	e1 f7       	brne	.-8      	; 0x23e <LCD_init+0x4c>
     246:	00 c0       	rjmp	.+0      	; 0x248 <LCD_init+0x56>
     248:	00 00       	nop
	
	
	_delay_ms(35);
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	61 e0       	ldi	r22, 0x01	; 1
     24e:	40 e0       	ldi	r20, 0x00	; 0
     250:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	62 e0       	ldi	r22, 0x02	; 2
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	private_WriteHalfPort(LCD_COMMAND_FOR_FOUR_BIT_MODE);
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	0e 94 83 00 	call	0x106	; 0x106 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	63 e0       	ldi	r22, 0x03	; 3
     268:	41 e0       	ldi	r20, 0x01	; 1
     26a:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
     26e:	af e9       	ldi	r26, 0x9F	; 159
     270:	bf e0       	ldi	r27, 0x0F	; 15
     272:	11 97       	sbiw	r26, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <LCD_init+0x80>
     276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_init+0x86>
     278:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	63 e0       	ldi	r22, 0x03	; 3
     27e:	40 e0       	ldi	r20, 0x00	; 0
     280:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	
	LCD_sendComnd(LCD_FUNCTION_SET);
     284:	88 e2       	ldi	r24, 0x28	; 40
     286:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     28a:	b0 ef       	ldi	r27, 0xF0	; 240
     28c:	ba 95       	dec	r27
     28e:	f1 f7       	brne	.-4      	; 0x28c <LCD_init+0x9a>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DISPLAY_ON_OFF_CONTROL);
     290:	8c e0       	ldi	r24, 0x0C	; 12
     292:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_sendComnd>
     296:	80 ef       	ldi	r24, 0xF0	; 240
     298:	8a 95       	dec	r24
     29a:	f1 f7       	brne	.-4      	; 0x298 <LCD_init+0xa6>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DESPLAY_CLEAR);
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a2:	af e3       	ldi	r26, 0x3F	; 63
     2a4:	bf e1       	ldi	r27, 0x1F	; 31
     2a6:	11 97       	sbiw	r26, 0x01	; 1
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <LCD_init+0xb4>
     2aa:	00 c0       	rjmp	.+0      	; 0x2ac <LCD_init+0xba>
     2ac:	00 00       	nop
	_delay_ms(2);
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
     2ae:	86 e0       	ldi	r24, 0x06	; 6
     2b0:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2b4:	b0 ef       	ldi	r27, 0xF0	; 240
     2b6:	ba 95       	dec	r27
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LCD_init+0xc4>
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
	_delay_us(45);
	
	#endif
}
     2ba:	08 95       	ret

000002bc <LCD_sendChar>:
	
}


void LCD_sendChar(u8 Character_Data)
{
     2bc:	cf 93       	push	r28
     2be:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	61 e0       	ldi	r22, 0x01	; 1
     2c4:	41 e0       	ldi	r20, 0x01	; 1
     2c6:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	62 e0       	ldi	r22, 0x02	; 2
     2ce:	40 e0       	ldi	r20, 0x00	; 0
     2d0:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data>>4);                        //PORTA_REG= (PORTA_REG & 0x0f) | (Character_Data & 0xf0)
     2d4:	8c 2f       	mov	r24, r28
     2d6:	82 95       	swap	r24
     2d8:	8f 70       	andi	r24, 0x0F	; 15
     2da:	0e 94 83 00 	call	0x106	; 0x106 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	63 e0       	ldi	r22, 0x03	; 3
     2e2:	41 e0       	ldi	r20, 0x01	; 1
     2e4:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2e8:	8f e9       	ldi	r24, 0x9F	; 159
     2ea:	9f e0       	ldi	r25, 0x0F	; 15
     2ec:	01 97       	sbiw	r24, 0x01	; 1
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <LCD_sendChar+0x30>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <LCD_sendChar+0x36>
     2f2:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	63 e0       	ldi	r22, 0x03	; 3
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data);                         //PORTA_REG= (PORTA_REG & 0x0f) | ((Character_Data & 0xf0) <<4)
     2fe:	8c 2f       	mov	r24, r28
     300:	0e 94 83 00 	call	0x106	; 0x106 <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	63 e0       	ldi	r22, 0x03	; 3
     308:	41 e0       	ldi	r20, 0x01	; 1
     30a:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
     30e:	8f e9       	ldi	r24, 0x9F	; 159
     310:	9f e0       	ldi	r25, 0x0F	; 15
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <LCD_sendChar+0x56>
     316:	00 c0       	rjmp	.+0      	; 0x318 <LCD_sendChar+0x5c>
     318:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	63 e0       	ldi	r22, 0x03	; 3
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
}
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <LCD_SendString>:

void LCD_SendString (u8 *String_Data)
{
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	ec 01       	movw	r28, r24
	while((*String_Data)!='\0')
     32e:	88 81       	ld	r24, Y
     330:	88 23       	and	r24, r24
     332:	31 f0       	breq	.+12     	; 0x340 <LCD_SendString+0x18>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
}

void LCD_SendString (u8 *String_Data)
     334:	21 96       	adiw	r28, 0x01	; 1
{
	while((*String_Data)!='\0')
	{
		LCD_sendChar(*String_Data);
     336:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_sendChar>
	#endif
}

void LCD_SendString (u8 *String_Data)
{
	while((*String_Data)!='\0')
     33a:	89 91       	ld	r24, Y+
     33c:	88 23       	and	r24, r24
     33e:	d9 f7       	brne	.-10     	; 0x336 <LCD_SendString+0xe>
	{
		LCD_sendChar(*String_Data);
		String_Data++;
	}
}
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <LCD_SendRealNumber>:

void LCD_SendRealNumber(f64 Number)
{
     346:	8f 92       	push	r8
     348:	9f 92       	push	r9
     34a:	af 92       	push	r10
     34c:	bf 92       	push	r11
     34e:	cf 92       	push	r12
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	60 97       	sbiw	r28, 0x10	; 16
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61
     36e:	6b 01       	movw	r12, r22
     370:	7c 01       	movw	r14, r24
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	a9 01       	movw	r20, r18
     378:	0e 94 df 07 	call	0xfbe	; 0xfbe <__cmpsf2>
     37c:	88 23       	and	r24, r24
     37e:	5c f4       	brge	.+22     	; 0x396 <LCD_SendRealNumber+0x50>
	f32 tmpval = (Number < 0)? -Number : Number;
     380:	f7 fa       	bst	r15, 7
     382:	f0 94       	com	r15
     384:	f7 f8       	bld	r15, 7
     386:	f0 94       	com	r15
}

void LCD_SendRealNumber(f64 Number)
{
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
     388:	0f 2e       	mov	r0, r31
     38a:	f0 e6       	ldi	r31, 0x60	; 96
     38c:	8f 2e       	mov	r8, r31
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	9f 2e       	mov	r9, r31
     392:	f0 2d       	mov	r31, r0
     394:	06 c0       	rjmp	.+12     	; 0x3a2 <LCD_SendRealNumber+0x5c>
     396:	0f 2e       	mov	r0, r31
     398:	f2 e6       	ldi	r31, 0x62	; 98
     39a:	8f 2e       	mov	r8, r31
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	9f 2e       	mov	r9, r31
     3a0:	f0 2d       	mov	r31, r0
	f32 tmpval = (Number < 0)? -Number : Number;
	u16 tmpint1 = (u16)tmpval;
     3a2:	c7 01       	movw	r24, r14
     3a4:	b6 01       	movw	r22, r12
     3a6:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fixunssfsi>
     3aa:	dc 01       	movw	r26, r24
     3ac:	cb 01       	movw	r24, r22
	f32 tmpfrac = tmpval - (float)tmpint1;
	u16 tmpint2 = tmpfrac * 10000;
	sprintf(str,"%s%d.%04d", tmpsign, tmpint1, tmpint2);
     3ae:	2d b7       	in	r18, 0x3d	; 61
     3b0:	3e b7       	in	r19, 0x3e	; 62
     3b2:	2a 50       	subi	r18, 0x0A	; 10
     3b4:	30 40       	sbci	r19, 0x00	; 0
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	3e bf       	out	0x3e, r19	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	2d bf       	out	0x3d, r18	; 61
     3c0:	0d b7       	in	r16, 0x3d	; 61
     3c2:	1e b7       	in	r17, 0x3e	; 62
     3c4:	0f 5f       	subi	r16, 0xFF	; 255
     3c6:	1f 4f       	sbci	r17, 0xFF	; 255
     3c8:	5e 01       	movw	r10, r28
     3ca:	08 94       	sec
     3cc:	a1 1c       	adc	r10, r1
     3ce:	b1 1c       	adc	r11, r1
     3d0:	ed b7       	in	r30, 0x3d	; 61
     3d2:	fe b7       	in	r31, 0x3e	; 62
     3d4:	b2 82       	std	Z+2, r11	; 0x02
     3d6:	a1 82       	std	Z+1, r10	; 0x01
     3d8:	23 e6       	ldi	r18, 0x63	; 99
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	f8 01       	movw	r30, r16
     3de:	33 83       	std	Z+3, r19	; 0x03
     3e0:	22 83       	std	Z+2, r18	; 0x02
     3e2:	95 82       	std	Z+5, r9	; 0x05
     3e4:	84 82       	std	Z+4, r8	; 0x04
     3e6:	97 83       	std	Z+7, r25	; 0x07
     3e8:	86 83       	std	Z+6, r24	; 0x06
{
	u8 str [16];
	u8 *tmpsign = (Number < 0)? "-" : "";
	f32 tmpval = (Number < 0)? -Number : Number;
	u16 tmpint1 = (u16)tmpval;
	f32 tmpfrac = tmpval - (float)tmpint1;
     3ea:	bc 01       	movw	r22, r24
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 0f 08 	call	0x101e	; 0x101e <__floatunsisf>
     3f4:	9b 01       	movw	r18, r22
     3f6:	ac 01       	movw	r20, r24
     3f8:	c7 01       	movw	r24, r14
     3fa:	b6 01       	movw	r22, r12
     3fc:	0e 94 7a 07 	call	0xef4	; 0xef4 <__subsf3>
	u16 tmpint2 = tmpfrac * 10000;
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e4       	ldi	r19, 0x40	; 64
     404:	4c e1       	ldi	r20, 0x1C	; 28
     406:	56 e4       	ldi	r21, 0x46	; 70
     408:	0e 94 c1 08 	call	0x1182	; 0x1182 <__mulsf3>
     40c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__fixunssfsi>
     410:	dc 01       	movw	r26, r24
     412:	cb 01       	movw	r24, r22
	sprintf(str,"%s%d.%04d", tmpsign, tmpint1, tmpint2);
     414:	f8 01       	movw	r30, r16
     416:	91 87       	std	Z+9, r25	; 0x09
     418:	80 87       	std	Z+8, r24	; 0x08
     41a:	0e 94 54 09 	call	0x12a8	; 0x12a8 <sprintf>
	LCD_SendString(str);
     41e:	2d b7       	in	r18, 0x3d	; 61
     420:	3e b7       	in	r19, 0x3e	; 62
     422:	26 5f       	subi	r18, 0xF6	; 246
     424:	3f 4f       	sbci	r19, 0xFF	; 255
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	3e bf       	out	0x3e, r19	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	2d bf       	out	0x3d, r18	; 61
     430:	c5 01       	movw	r24, r10
     432:	0e 94 94 01 	call	0x328	; 0x328 <LCD_SendString>
}
     436:	60 96       	adiw	r28, 0x10	; 16
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	1f 91       	pop	r17
     448:	0f 91       	pop	r16
     44a:	ff 90       	pop	r15
     44c:	ef 90       	pop	r14
     44e:	df 90       	pop	r13
     450:	cf 90       	pop	r12
     452:	bf 90       	pop	r11
     454:	af 90       	pop	r10
     456:	9f 90       	pop	r9
     458:	8f 90       	pop	r8
     45a:	08 95       	ret

0000045c <LCD_ClearDesplay>:

void LCD_ClearDesplay()
{
	LCD_sendComnd (LCD_DESPLAY_CLEAR);
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_sendComnd>
     462:	8f e3       	ldi	r24, 0x3F	; 63
     464:	9f e1       	ldi	r25, 0x1F	; 31
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <LCD_ClearDesplay+0xa>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <LCD_ClearDesplay+0x10>
     46c:	00 00       	nop
	_delay_ms(2);
	LCD_sendComnd (LCD_Cursor_At_Home_position);	
     46e:	80 e8       	ldi	r24, 0x80	; 128
     470:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_sendComnd>
}
     474:	08 95       	ret

00000476 <LCD_GoToLocation>:

void LCD_GoToLocation(u8 X_Location, u8 LineNumber)
{
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	00 d0       	rcall	.+0      	; 0x47c <LCD_GoToLocation+0x6>
     47c:	00 d0       	rcall	.+0      	; 0x47e <LCD_GoToLocation+0x8>
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
	u8 FirstLocation[] = {0x80, 0xC0, 0x94, 0xD4};
     482:	90 e8       	ldi	r25, 0x80	; 128
     484:	99 83       	std	Y+1, r25	; 0x01
     486:	90 ec       	ldi	r25, 0xC0	; 192
     488:	9a 83       	std	Y+2, r25	; 0x02
     48a:	94 e9       	ldi	r25, 0x94	; 148
     48c:	9b 83       	std	Y+3, r25	; 0x03
     48e:	94 ed       	ldi	r25, 0xD4	; 212
     490:	9c 83       	std	Y+4, r25	; 0x04
	LCD_sendComnd(FirstLocation[LineNumber-1] + X_Location-1);
     492:	81 50       	subi	r24, 0x01	; 1
     494:	fe 01       	movw	r30, r28
     496:	e6 0f       	add	r30, r22
     498:	f1 1d       	adc	r31, r1
     49a:	90 81       	ld	r25, Z
     49c:	89 0f       	add	r24, r25
     49e:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a2:	8f e9       	ldi	r24, 0x9F	; 159
     4a4:	9f e0       	ldi	r25, 0x0F	; 15
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <LCD_GoToLocation+0x30>
     4aa:	00 c0       	rjmp	.+0      	; 0x4ac <LCD_GoToLocation+0x36>
     4ac:	00 00       	nop
	_delay_us(1000);
}
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <LCD_SendIntegarNumber>:

void LCD_SendIntegarNumber(u16 IntegerNumber)
{
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	a0 97       	sbiw	r28, 0x20	; 32
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
	u16 NumberString[16];
	snprintf(NumberString,17,"%d",IntegerNumber);
     4d4:	2d b7       	in	r18, 0x3d	; 61
     4d6:	3e b7       	in	r19, 0x3e	; 62
     4d8:	28 50       	subi	r18, 0x08	; 8
     4da:	30 40       	sbci	r19, 0x00	; 0
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	3e bf       	out	0x3e, r19	; 62
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	2d bf       	out	0x3d, r18	; 61
     4e6:	ed b7       	in	r30, 0x3d	; 61
     4e8:	fe b7       	in	r31, 0x3e	; 62
     4ea:	31 96       	adiw	r30, 0x01	; 1
     4ec:	8e 01       	movw	r16, r28
     4ee:	0f 5f       	subi	r16, 0xFF	; 255
     4f0:	1f 4f       	sbci	r17, 0xFF	; 255
     4f2:	ad b7       	in	r26, 0x3d	; 61
     4f4:	be b7       	in	r27, 0x3e	; 62
     4f6:	12 96       	adiw	r26, 0x02	; 2
     4f8:	1c 93       	st	X, r17
     4fa:	0e 93       	st	-X, r16
     4fc:	11 97       	sbiw	r26, 0x01	; 1
     4fe:	21 e1       	ldi	r18, 0x11	; 17
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	33 83       	std	Z+3, r19	; 0x03
     504:	22 83       	std	Z+2, r18	; 0x02
     506:	2d e6       	ldi	r18, 0x6D	; 109
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	35 83       	std	Z+5, r19	; 0x05
     50c:	24 83       	std	Z+4, r18	; 0x04
     50e:	97 83       	std	Z+7, r25	; 0x07
     510:	86 83       	std	Z+6, r24	; 0x06
     512:	0e 94 24 09 	call	0x1248	; 0x1248 <snprintf>
	LCD_SendString(NumberString);
     516:	2d b7       	in	r18, 0x3d	; 61
     518:	3e b7       	in	r19, 0x3e	; 62
     51a:	28 5f       	subi	r18, 0xF8	; 248
     51c:	3f 4f       	sbci	r19, 0xFF	; 255
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	3e bf       	out	0x3e, r19	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	2d bf       	out	0x3d, r18	; 61
     528:	c8 01       	movw	r24, r16
     52a:	0e 94 94 01 	call	0x328	; 0x328 <LCD_SendString>
}
     52e:	a0 96       	adiw	r28, 0x20	; 32
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	08 95       	ret

00000544 <LCD_SendNumberToLocation>:


void LCD_SendNumberToLocation(u16 Number,u8 X_Location, u8 LineNumber)
{
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
     54a:	86 2f       	mov	r24, r22
	LCD_GoToLocation(X_Location,LineNumber);
     54c:	64 2f       	mov	r22, r20
     54e:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_GoToLocation>
	LCD_SendIntegarNumber(Number);
     552:	ce 01       	movw	r24, r28
     554:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LCD_SendIntegarNumber>
}
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <LCD_Shift>:


void LCD_Shift(u8 ShiftCmnd)
{
	LCD_sendComnd(ShiftCmnd);
     55e:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_sendComnd>
}
     562:	08 95       	ret

00000564 <LED_init>:
#include "LED_config.h"


void LED_init(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     564:	84 30       	cpi	r24, 0x04	; 4
     566:	28 f4       	brcc	.+10     	; 0x572 <LED_init+0xe>
     568:	68 30       	cpi	r22, 0x08	; 8
     56a:	18 f4       	brcc	.+6      	; 0x572 <LED_init+0xe>
	{
		DIO_SetPinDirection(LedPort,LedPin,DIO_PIN_OUTPUT);
     56c:	41 e0       	ldi	r20, 0x01	; 1
     56e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <DIO_SetPinDirection>
     572:	08 95       	ret

00000574 <LED_TurnON>:
}


void LED_TurnON(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     574:	84 30       	cpi	r24, 0x04	; 4
     576:	28 f4       	brcc	.+10     	; 0x582 <LED_TurnON+0xe>
     578:	68 30       	cpi	r22, 0x08	; 8
     57a:	18 f4       	brcc	.+6      	; 0x582 <LED_TurnON+0xe>
	{
		DIO_SetPinValue(LedPort,LedPin,DIO_PIN_HIGH);
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
     582:	08 95       	ret

00000584 <LED_TurnOFF>:
}


void LED_TurnOFF(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     584:	84 30       	cpi	r24, 0x04	; 4
     586:	28 f4       	brcc	.+10     	; 0x592 <LED_TurnOFF+0xe>
     588:	68 30       	cpi	r22, 0x08	; 8
     58a:	18 f4       	brcc	.+6      	; 0x592 <LED_TurnOFF+0xe>
	{
		DIO_SetPinValue(LedPort,LedPin,DIO_PIN_LOW);
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	0e 94 67 03 	call	0x6ce	; 0x6ce <DIO_SetPinValue>
     592:	08 95       	ret

00000594 <LED_Toggle>:
}


void LED_Toggle(u8 LedPort,u8 LedPin)
{
	 if (LedPort <=3 && LedPin<=7)
     594:	84 30       	cpi	r24, 0x04	; 4
     596:	20 f4       	brcc	.+8      	; 0x5a0 <LED_Toggle+0xc>
     598:	68 30       	cpi	r22, 0x08	; 8
     59a:	10 f4       	brcc	.+4      	; 0x5a0 <LED_Toggle+0xc>
	 {
		DIO_TogglePinValue(LedPort,LedPin);
     59c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <DIO_TogglePinValue>
     5a0:	08 95       	ret

000005a2 <DIO_SetPinDirection>:


DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
     5a2:	84 30       	cpi	r24, 0x04	; 4
     5a4:	08 f0       	brcs	.+2      	; 0x5a8 <DIO_SetPinDirection+0x6>
     5a6:	8b c0       	rjmp	.+278    	; 0x6be <DIO_SetPinDirection+0x11c>
     5a8:	68 30       	cpi	r22, 0x08	; 8
     5aa:	08 f0       	brcs	.+2      	; 0x5ae <DIO_SetPinDirection+0xc>
     5ac:	8a c0       	rjmp	.+276    	; 0x6c2 <DIO_SetPinDirection+0x120>
     5ae:	42 30       	cpi	r20, 0x02	; 2
     5b0:	08 f0       	brcs	.+2      	; 0x5b4 <DIO_SetPinDirection+0x12>
     5b2:	89 c0       	rjmp	.+274    	; 0x6c6 <DIO_SetPinDirection+0x124>
	{
    	switch(PortId)
     5b4:	81 30       	cpi	r24, 0x01	; 1
     5b6:	41 f1       	breq	.+80     	; 0x608 <DIO_SetPinDirection+0x66>
     5b8:	81 30       	cpi	r24, 0x01	; 1
     5ba:	38 f0       	brcs	.+14     	; 0x5ca <DIO_SetPinDirection+0x28>
     5bc:	82 30       	cpi	r24, 0x02	; 2
     5be:	09 f4       	brne	.+2      	; 0x5c2 <DIO_SetPinDirection+0x20>
     5c0:	41 c0       	rjmp	.+130    	; 0x644 <DIO_SetPinDirection+0xa2>
     5c2:	83 30       	cpi	r24, 0x03	; 3
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <DIO_SetPinDirection+0x26>
     5c6:	81 c0       	rjmp	.+258    	; 0x6ca <DIO_SetPinDirection+0x128>
     5c8:	5b c0       	rjmp	.+182    	; 0x680 <DIO_SetPinDirection+0xde>
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
     5ca:	41 30       	cpi	r20, 0x01	; 1
     5cc:	71 f4       	brne	.+28     	; 0x5ea <DIO_SetPinDirection+0x48>
     5ce:	2a b3       	in	r18, 0x1a	; 26
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	ac 01       	movw	r20, r24
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_SetPinDirection+0x3a>
     5d8:	44 0f       	add	r20, r20
     5da:	55 1f       	adc	r21, r21
     5dc:	6a 95       	dec	r22
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_SetPinDirection+0x36>
     5e0:	ba 01       	movw	r22, r20
     5e2:	62 2b       	or	r22, r18
     5e4:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
	{
    	switch(PortId)
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
     5ea:	2a b3       	in	r18, 0x1a	; 26
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	ac 01       	movw	r20, r24
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_SetPinDirection+0x56>
     5f4:	44 0f       	add	r20, r20
     5f6:	55 1f       	adc	r21, r21
     5f8:	6a 95       	dec	r22
     5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_SetPinDirection+0x52>
     5fc:	ba 01       	movw	r22, r20
     5fe:	60 95       	com	r22
     600:	62 23       	and	r22, r18
     602:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
     608:	41 30       	cpi	r20, 0x01	; 1
     60a:	69 f4       	brne	.+26     	; 0x626 <DIO_SetPinDirection+0x84>
     60c:	47 b3       	in	r20, 0x17	; 23
     60e:	21 e0       	ldi	r18, 0x01	; 1
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	c9 01       	movw	r24, r18
     614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_SetPinDirection+0x78>
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	6a 95       	dec	r22
     61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_SetPinDirection+0x74>
     61e:	84 2b       	or	r24, r20
     620:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
     626:	27 b3       	in	r18, 0x17	; 23
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	ac 01       	movw	r20, r24
     62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_SetPinDirection+0x92>
     630:	44 0f       	add	r20, r20
     632:	55 1f       	adc	r21, r21
     634:	6a 95       	dec	r22
     636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_SetPinDirection+0x8e>
     638:	ba 01       	movw	r22, r20
     63a:	60 95       	com	r22
     63c:	62 23       	and	r22, r18
     63e:	67 bb       	out	0x17, r22	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
     644:	41 30       	cpi	r20, 0x01	; 1
     646:	69 f4       	brne	.+26     	; 0x662 <DIO_SetPinDirection+0xc0>
     648:	44 b3       	in	r20, 0x14	; 20
     64a:	21 e0       	ldi	r18, 0x01	; 1
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	c9 01       	movw	r24, r18
     650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_SetPinDirection+0xb4>
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	6a 95       	dec	r22
     658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_SetPinDirection+0xb0>
     65a:	84 2b       	or	r24, r20
     65c:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
     662:	24 b3       	in	r18, 0x14	; 20
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	ac 01       	movw	r20, r24
     66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_SetPinDirection+0xce>
     66c:	44 0f       	add	r20, r20
     66e:	55 1f       	adc	r21, r21
     670:	6a 95       	dec	r22
     672:	e2 f7       	brpl	.-8      	; 0x66c <DIO_SetPinDirection+0xca>
     674:	ba 01       	movw	r22, r20
     676:	60 95       	com	r22
     678:	62 23       	and	r22, r18
     67a:	64 bb       	out	0x14, r22	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
     680:	41 30       	cpi	r20, 0x01	; 1
     682:	71 f4       	brne	.+28     	; 0x6a0 <DIO_SetPinDirection+0xfe>
     684:	21 b3       	in	r18, 0x11	; 17
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	ac 01       	movw	r20, r24
     68c:	02 c0       	rjmp	.+4      	; 0x692 <DIO_SetPinDirection+0xf0>
     68e:	44 0f       	add	r20, r20
     690:	55 1f       	adc	r21, r21
     692:	6a 95       	dec	r22
     694:	e2 f7       	brpl	.-8      	; 0x68e <DIO_SetPinDirection+0xec>
     696:	ba 01       	movw	r22, r20
     698:	62 2b       	or	r22, r18
     69a:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
     6a0:	21 b3       	in	r18, 0x11	; 17
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	ac 01       	movw	r20, r24
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_SetPinDirection+0x10c>
     6aa:	44 0f       	add	r20, r20
     6ac:	55 1f       	adc	r21, r21
     6ae:	6a 95       	dec	r22
     6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_SetPinDirection+0x108>
     6b2:	ba 01       	movw	r22, r20
     6b4:	60 95       	com	r22
     6b6:	62 23       	and	r22, r18
     6b8:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	08 95       	ret
		   break;
	    }	
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	08 95       	ret
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	08 95       	ret
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	08 95       	ret



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     6ca:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     6cc:	08 95       	ret

000006ce <DIO_SetPinValue>:

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
     6ce:	84 30       	cpi	r24, 0x04	; 4
     6d0:	08 f0       	brcs	.+2      	; 0x6d4 <DIO_SetPinValue+0x6>
     6d2:	8b c0       	rjmp	.+278    	; 0x7ea <DIO_SetPinValue+0x11c>
     6d4:	68 30       	cpi	r22, 0x08	; 8
     6d6:	08 f0       	brcs	.+2      	; 0x6da <DIO_SetPinValue+0xc>
     6d8:	8a c0       	rjmp	.+276    	; 0x7ee <DIO_SetPinValue+0x120>
     6da:	42 30       	cpi	r20, 0x02	; 2
     6dc:	08 f0       	brcs	.+2      	; 0x6e0 <DIO_SetPinValue+0x12>
     6de:	89 c0       	rjmp	.+274    	; 0x7f2 <DIO_SetPinValue+0x124>
	{
			switch (PortId)
     6e0:	81 30       	cpi	r24, 0x01	; 1
     6e2:	41 f1       	breq	.+80     	; 0x734 <DIO_SetPinValue+0x66>
     6e4:	81 30       	cpi	r24, 0x01	; 1
     6e6:	38 f0       	brcs	.+14     	; 0x6f6 <DIO_SetPinValue+0x28>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	09 f4       	brne	.+2      	; 0x6ee <DIO_SetPinValue+0x20>
     6ec:	41 c0       	rjmp	.+130    	; 0x770 <DIO_SetPinValue+0xa2>
     6ee:	83 30       	cpi	r24, 0x03	; 3
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <DIO_SetPinValue+0x26>
     6f2:	81 c0       	rjmp	.+258    	; 0x7f6 <DIO_SetPinValue+0x128>
     6f4:	5b c0       	rjmp	.+182    	; 0x7ac <DIO_SetPinValue+0xde>
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
     6f6:	41 30       	cpi	r20, 0x01	; 1
     6f8:	71 f4       	brne	.+28     	; 0x716 <DIO_SetPinValue+0x48>
     6fa:	2b b3       	in	r18, 0x1b	; 27
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	ac 01       	movw	r20, r24
     702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_SetPinValue+0x3a>
     704:	44 0f       	add	r20, r20
     706:	55 1f       	adc	r21, r21
     708:	6a 95       	dec	r22
     70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_SetPinValue+0x36>
     70c:	ba 01       	movw	r22, r20
     70e:	62 2b       	or	r22, r18
     710:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
	{
			switch (PortId)
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
     716:	2b b3       	in	r18, 0x1b	; 27
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	ac 01       	movw	r20, r24
     71e:	02 c0       	rjmp	.+4      	; 0x724 <DIO_SetPinValue+0x56>
     720:	44 0f       	add	r20, r20
     722:	55 1f       	adc	r21, r21
     724:	6a 95       	dec	r22
     726:	e2 f7       	brpl	.-8      	; 0x720 <DIO_SetPinValue+0x52>
     728:	ba 01       	movw	r22, r20
     72a:	60 95       	com	r22
     72c:	62 23       	and	r22, r18
     72e:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
     734:	41 30       	cpi	r20, 0x01	; 1
     736:	69 f4       	brne	.+26     	; 0x752 <DIO_SetPinValue+0x84>
     738:	48 b3       	in	r20, 0x18	; 24
     73a:	21 e0       	ldi	r18, 0x01	; 1
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	c9 01       	movw	r24, r18
     740:	02 c0       	rjmp	.+4      	; 0x746 <DIO_SetPinValue+0x78>
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	6a 95       	dec	r22
     748:	e2 f7       	brpl	.-8      	; 0x742 <DIO_SetPinValue+0x74>
     74a:	84 2b       	or	r24, r20
     74c:	88 bb       	out	0x18, r24	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
     752:	28 b3       	in	r18, 0x18	; 24
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	ac 01       	movw	r20, r24
     75a:	02 c0       	rjmp	.+4      	; 0x760 <DIO_SetPinValue+0x92>
     75c:	44 0f       	add	r20, r20
     75e:	55 1f       	adc	r21, r21
     760:	6a 95       	dec	r22
     762:	e2 f7       	brpl	.-8      	; 0x75c <DIO_SetPinValue+0x8e>
     764:	ba 01       	movw	r22, r20
     766:	60 95       	com	r22
     768:	62 23       	and	r22, r18
     76a:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
     770:	41 30       	cpi	r20, 0x01	; 1
     772:	69 f4       	brne	.+26     	; 0x78e <DIO_SetPinValue+0xc0>
     774:	45 b3       	in	r20, 0x15	; 21
     776:	21 e0       	ldi	r18, 0x01	; 1
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	c9 01       	movw	r24, r18
     77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_SetPinValue+0xb4>
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	6a 95       	dec	r22
     784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_SetPinValue+0xb0>
     786:	84 2b       	or	r24, r20
     788:	85 bb       	out	0x15, r24	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
     78e:	25 b3       	in	r18, 0x15	; 21
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	ac 01       	movw	r20, r24
     796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_SetPinValue+0xce>
     798:	44 0f       	add	r20, r20
     79a:	55 1f       	adc	r21, r21
     79c:	6a 95       	dec	r22
     79e:	e2 f7       	brpl	.-8      	; 0x798 <DIO_SetPinValue+0xca>
     7a0:	ba 01       	movw	r22, r20
     7a2:	60 95       	com	r22
     7a4:	62 23       	and	r22, r18
     7a6:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
     7ac:	41 30       	cpi	r20, 0x01	; 1
     7ae:	71 f4       	brne	.+28     	; 0x7cc <DIO_SetPinValue+0xfe>
     7b0:	22 b3       	in	r18, 0x12	; 18
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	ac 01       	movw	r20, r24
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <DIO_SetPinValue+0xf0>
     7ba:	44 0f       	add	r20, r20
     7bc:	55 1f       	adc	r21, r21
     7be:	6a 95       	dec	r22
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <DIO_SetPinValue+0xec>
     7c2:	ba 01       	movw	r22, r20
     7c4:	62 2b       	or	r22, r18
     7c6:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
     7cc:	22 b3       	in	r18, 0x12	; 18
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	ac 01       	movw	r20, r24
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <DIO_SetPinValue+0x10c>
     7d6:	44 0f       	add	r20, r20
     7d8:	55 1f       	adc	r21, r21
     7da:	6a 95       	dec	r22
     7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <DIO_SetPinValue+0x108>
     7de:	ba 01       	movw	r22, r20
     7e0:	60 95       	com	r22
     7e2:	62 23       	and	r22, r18
     7e4:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	08 95       	ret
			    break;
			}	
		} 
	else
	{
		ErrorStatus = DIO_NOK;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	08 95       	ret
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	08 95       	ret
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	08 95       	ret
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     7f6:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     7f8:	08 95       	ret

000007fa <DIO_TogglePinValue>:
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))  //edit all
     7fa:	84 30       	cpi	r24, 0x04	; 4
     7fc:	08 f0       	brcs	.+2      	; 0x800 <DIO_TogglePinValue+0x6>
     7fe:	45 c0       	rjmp	.+138    	; 0x88a <__stack+0x2b>
     800:	68 30       	cpi	r22, 0x08	; 8
     802:	08 f0       	brcs	.+2      	; 0x806 <DIO_TogglePinValue+0xc>
     804:	44 c0       	rjmp	.+136    	; 0x88e <__stack+0x2f>
	{
		switch (PortId)
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	b1 f0       	breq	.+44     	; 0x836 <DIO_TogglePinValue+0x3c>
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	30 f0       	brcs	.+12     	; 0x81a <DIO_TogglePinValue+0x20>
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	01 f1       	breq	.+64     	; 0x852 <DIO_TogglePinValue+0x58>
     812:	83 30       	cpi	r24, 0x03	; 3
     814:	09 f0       	breq	.+2      	; 0x818 <DIO_TogglePinValue+0x1e>
     816:	3d c0       	rjmp	.+122    	; 0x892 <__stack+0x33>
     818:	2a c0       	rjmp	.+84     	; 0x86e <__stack+0xf>
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
     81a:	2b b3       	in	r18, 0x1b	; 27
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	ac 01       	movw	r20, r24
     822:	02 c0       	rjmp	.+4      	; 0x828 <DIO_TogglePinValue+0x2e>
     824:	44 0f       	add	r20, r20
     826:	55 1f       	adc	r21, r21
     828:	6a 95       	dec	r22
     82a:	e2 f7       	brpl	.-8      	; 0x824 <DIO_TogglePinValue+0x2a>
     82c:	ba 01       	movw	r22, r20
     82e:	62 27       	eor	r22, r18
     830:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     832:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
			break;
     834:	08 95       	ret
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
     836:	28 b3       	in	r18, 0x18	; 24
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	ac 01       	movw	r20, r24
     83e:	02 c0       	rjmp	.+4      	; 0x844 <DIO_TogglePinValue+0x4a>
     840:	44 0f       	add	r20, r20
     842:	55 1f       	adc	r21, r21
     844:	6a 95       	dec	r22
     846:	e2 f7       	brpl	.-8      	; 0x840 <DIO_TogglePinValue+0x46>
     848:	ba 01       	movw	r22, r20
     84a:	62 27       	eor	r22, r18
     84c:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     84e:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTA_REG,PinId);
			break;
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
			break;
     850:	08 95       	ret
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
     852:	25 b3       	in	r18, 0x15	; 21
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	ac 01       	movw	r20, r24
     85a:	02 c0       	rjmp	.+4      	; 0x860 <__stack+0x1>
     85c:	44 0f       	add	r20, r20
     85e:	55 1f       	adc	r21, r21
     860:	6a 95       	dec	r22
     862:	e2 f7       	brpl	.-8      	; 0x85c <DIO_TogglePinValue+0x62>
     864:	ba 01       	movw	r22, r20
     866:	62 27       	eor	r22, r18
     868:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     86a:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTB_REG,PinId);
			break;
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
			break;
     86c:	08 95       	ret
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
     86e:	22 b3       	in	r18, 0x12	; 18
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	ac 01       	movw	r20, r24
     876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
     878:	44 0f       	add	r20, r20
     87a:	55 1f       	adc	r21, r21
     87c:	6a 95       	dec	r22
     87e:	e2 f7       	brpl	.-8      	; 0x878 <__stack+0x19>
     880:	ba 01       	movw	r22, r20
     882:	62 27       	eor	r22, r18
     884:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     886:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTC_REG,PinId);
			break;
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
			break;
     888:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	08 95       	ret
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	08 95       	ret
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
     892:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     894:	08 95       	ret

00000896 <DIO_ReadValue>:
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue!=NULL)) //wild pointer 
     896:	84 30       	cpi	r24, 0x04	; 4
     898:	08 f0       	brcs	.+2      	; 0x89c <DIO_ReadValue+0x6>
     89a:	49 c0       	rjmp	.+146    	; 0x92e <DIO_ReadValue+0x98>
     89c:	68 30       	cpi	r22, 0x08	; 8
     89e:	08 f0       	brcs	.+2      	; 0x8a2 <DIO_ReadValue+0xc>
     8a0:	48 c0       	rjmp	.+144    	; 0x932 <DIO_ReadValue+0x9c>
     8a2:	41 15       	cp	r20, r1
     8a4:	51 05       	cpc	r21, r1
     8a6:	09 f4       	brne	.+2      	; 0x8aa <DIO_ReadValue+0x14>
     8a8:	46 c0       	rjmp	.+140    	; 0x936 <DIO_ReadValue+0xa0>
	{
		switch (PortId)
     8aa:	81 30       	cpi	r24, 0x01	; 1
     8ac:	b1 f0       	breq	.+44     	; 0x8da <DIO_ReadValue+0x44>
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	30 f0       	brcs	.+12     	; 0x8be <DIO_ReadValue+0x28>
     8b2:	82 30       	cpi	r24, 0x02	; 2
     8b4:	01 f1       	breq	.+64     	; 0x8f6 <DIO_ReadValue+0x60>
     8b6:	83 30       	cpi	r24, 0x03	; 3
     8b8:	09 f0       	breq	.+2      	; 0x8bc <DIO_ReadValue+0x26>
     8ba:	3f c0       	rjmp	.+126    	; 0x93a <DIO_ReadValue+0xa4>
     8bc:	2a c0       	rjmp	.+84     	; 0x912 <DIO_ReadValue+0x7c>
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
     8be:	89 b3       	in	r24, 0x19	; 25
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	9c 01       	movw	r18, r24
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <DIO_ReadValue+0x34>
     8c6:	35 95       	asr	r19
     8c8:	27 95       	ror	r18
     8ca:	6a 95       	dec	r22
     8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <DIO_ReadValue+0x30>
     8ce:	b9 01       	movw	r22, r18
     8d0:	61 70       	andi	r22, 0x01	; 1
     8d2:	fa 01       	movw	r30, r20
     8d4:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     8d6:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
     8d8:	08 95       	ret
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
     8da:	86 b3       	in	r24, 0x16	; 22
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	9c 01       	movw	r18, r24
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <DIO_ReadValue+0x50>
     8e2:	35 95       	asr	r19
     8e4:	27 95       	ror	r18
     8e6:	6a 95       	dec	r22
     8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <DIO_ReadValue+0x4c>
     8ea:	b9 01       	movw	r22, r18
     8ec:	61 70       	andi	r22, 0x01	; 1
     8ee:	fa 01       	movw	r30, r20
     8f0:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     8f2:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
     8f4:	08 95       	ret
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
     8f6:	83 b3       	in	r24, 0x13	; 19
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	9c 01       	movw	r18, r24
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <DIO_ReadValue+0x6c>
     8fe:	35 95       	asr	r19
     900:	27 95       	ror	r18
     902:	6a 95       	dec	r22
     904:	e2 f7       	brpl	.-8      	; 0x8fe <DIO_ReadValue+0x68>
     906:	b9 01       	movw	r22, r18
     908:	61 70       	andi	r22, 0x01	; 1
     90a:	fa 01       	movw	r30, r20
     90c:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     90e:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
     910:	08 95       	ret
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
     912:	80 b3       	in	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	9c 01       	movw	r18, r24
     918:	02 c0       	rjmp	.+4      	; 0x91e <DIO_ReadValue+0x88>
     91a:	35 95       	asr	r19
     91c:	27 95       	ror	r18
     91e:	6a 95       	dec	r22
     920:	e2 f7       	brpl	.-8      	; 0x91a <DIO_ReadValue+0x84>
     922:	b9 01       	movw	r22, r18
     924:	61 70       	andi	r22, 0x01	; 1
     926:	fa 01       	movw	r30, r20
     928:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     92a:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
			break;
     92c:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	08 95       	ret
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	08 95       	ret
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	08 95       	ret
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     93a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     93c:	08 95       	ret

0000093e <DIO_activePinInPullUpResistance>:
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	 if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
     93e:	84 30       	cpi	r24, 0x04	; 4
     940:	08 f0       	brcs	.+2      	; 0x944 <DIO_activePinInPullUpResistance+0x6>
     942:	45 c0       	rjmp	.+138    	; 0x9ce <DIO_activePinInPullUpResistance+0x90>
     944:	68 30       	cpi	r22, 0x08	; 8
     946:	08 f0       	brcs	.+2      	; 0x94a <DIO_activePinInPullUpResistance+0xc>
     948:	44 c0       	rjmp	.+136    	; 0x9d2 <DIO_activePinInPullUpResistance+0x94>
	 {
		 switch(PortId)
     94a:	81 30       	cpi	r24, 0x01	; 1
     94c:	b1 f0       	breq	.+44     	; 0x97a <DIO_activePinInPullUpResistance+0x3c>
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	30 f0       	brcs	.+12     	; 0x95e <DIO_activePinInPullUpResistance+0x20>
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	01 f1       	breq	.+64     	; 0x996 <DIO_activePinInPullUpResistance+0x58>
     956:	83 30       	cpi	r24, 0x03	; 3
     958:	09 f0       	breq	.+2      	; 0x95c <DIO_activePinInPullUpResistance+0x1e>
     95a:	3d c0       	rjmp	.+122    	; 0x9d6 <DIO_activePinInPullUpResistance+0x98>
     95c:	2a c0       	rjmp	.+84     	; 0x9b2 <DIO_activePinInPullUpResistance+0x74>
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
     95e:	2b b3       	in	r18, 0x1b	; 27
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	ac 01       	movw	r20, r24
     966:	02 c0       	rjmp	.+4      	; 0x96c <DIO_activePinInPullUpResistance+0x2e>
     968:	44 0f       	add	r20, r20
     96a:	55 1f       	adc	r21, r21
     96c:	6a 95       	dec	r22
     96e:	e2 f7       	brpl	.-8      	; 0x968 <DIO_activePinInPullUpResistance+0x2a>
     970:	ba 01       	movw	r22, r20
     972:	62 2b       	or	r22, r18
     974:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     976:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 switch(PortId)
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
			 break;
     978:	08 95       	ret
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
     97a:	28 b3       	in	r18, 0x18	; 24
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	ac 01       	movw	r20, r24
     982:	02 c0       	rjmp	.+4      	; 0x988 <DIO_activePinInPullUpResistance+0x4a>
     984:	44 0f       	add	r20, r20
     986:	55 1f       	adc	r21, r21
     988:	6a 95       	dec	r22
     98a:	e2 f7       	brpl	.-8      	; 0x984 <DIO_activePinInPullUpResistance+0x46>
     98c:	ba 01       	movw	r22, r20
     98e:	62 2b       	or	r22, r18
     990:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     992:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTA_REG,PinId);
			 break;
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
			 break;
     994:	08 95       	ret
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
     996:	25 b3       	in	r18, 0x15	; 21
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	ac 01       	movw	r20, r24
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <DIO_activePinInPullUpResistance+0x66>
     9a0:	44 0f       	add	r20, r20
     9a2:	55 1f       	adc	r21, r21
     9a4:	6a 95       	dec	r22
     9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <DIO_activePinInPullUpResistance+0x62>
     9a8:	ba 01       	movw	r22, r20
     9aa:	62 2b       	or	r22, r18
     9ac:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     9ae:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTB_REG,PinId);
			 break;
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
			 break;
     9b0:	08 95       	ret
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
     9b2:	22 b3       	in	r18, 0x12	; 18
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	ac 01       	movw	r20, r24
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <DIO_activePinInPullUpResistance+0x82>
     9bc:	44 0f       	add	r20, r20
     9be:	55 1f       	adc	r21, r21
     9c0:	6a 95       	dec	r22
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <DIO_activePinInPullUpResistance+0x7e>
     9c4:	ba 01       	movw	r22, r20
     9c6:	62 2b       	or	r22, r18
     9c8:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     9ca:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTC_REG,PinId);
			 break;
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
			 break;
     9cc:	08 95       	ret
	      } 
	 }	 
	 else
	 {
		ErrorStatus = DIO_NOK;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	08 95       	ret
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	08 95       	ret
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     9d6:	80 e0       	ldi	r24, 0x00	; 0
	 else
	 {
		ErrorStatus = DIO_NOK;
	 }
	 return ErrorStatus;
}
     9d8:	08 95       	ret

000009da <DIO_setPortDirection>:


DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
     9da:	84 30       	cpi	r24, 0x04	; 4
     9dc:	a8 f5       	brcc	.+106    	; 0xa48 <DIO_setPortDirection+0x6e>
	{
		switch(PortId)
     9de:	81 30       	cpi	r24, 0x01	; 1
     9e0:	91 f0       	breq	.+36     	; 0xa06 <DIO_setPortDirection+0x2c>
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	28 f0       	brcs	.+10     	; 0x9f0 <DIO_setPortDirection+0x16>
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	c9 f0       	breq	.+50     	; 0xa1c <DIO_setPortDirection+0x42>
     9ea:	83 30       	cpi	r24, 0x03	; 3
     9ec:	79 f5       	brne	.+94     	; 0xa4c <DIO_setPortDirection+0x72>
     9ee:	21 c0       	rjmp	.+66     	; 0xa32 <DIO_setPortDirection+0x58>
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
     9f0:	6f 3f       	cpi	r22, 0xFF	; 255
     9f2:	29 f4       	brne	.+10     	; 0x9fe <DIO_setPortDirection+0x24>
     9f4:	8a b3       	in	r24, 0x1a	; 26
     9f6:	8f ef       	ldi	r24, 0xFF	; 255
     9f8:	8a bb       	out	0x1a, r24	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	08 95       	ret
	if ( (PortId<=DIO_PORTD))
	{
		switch(PortId)
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
     9fe:	8a b3       	in	r24, 0x1a	; 26
     a00:	1a ba       	out	0x1a, r1	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
     a06:	6f 3f       	cpi	r22, 0xFF	; 255
     a08:	29 f4       	brne	.+10     	; 0xa14 <DIO_setPortDirection+0x3a>
     a0a:	87 b3       	in	r24, 0x17	; 23
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
     a14:	87 b3       	in	r24, 0x17	; 23
     a16:	17 ba       	out	0x17, r1	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
     a1c:	6f 3f       	cpi	r22, 0xFF	; 255
     a1e:	29 f4       	brne	.+10     	; 0xa2a <DIO_setPortDirection+0x50>
     a20:	84 b3       	in	r24, 0x14	; 20
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
     a2a:	84 b3       	in	r24, 0x14	; 20
     a2c:	14 ba       	out	0x14, r1	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
     a32:	6f 3f       	cpi	r22, 0xFF	; 255
     a34:	29 f4       	brne	.+10     	; 0xa40 <DIO_setPortDirection+0x66>
     a36:	81 b3       	in	r24, 0x11	; 17
     a38:	8f ef       	ldi	r24, 0xFF	; 255
     a3a:	81 bb       	out	0x11, r24	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
     a40:	81 b3       	in	r24, 0x11	; 17
     a42:	11 ba       	out	0x11, r1	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	08 95       	ret
			break;
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 95       	ret



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     a4c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     a4e:	08 95       	ret

00000a50 <DIO_setPortValue>:


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) )
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	a8 f4       	brcc	.+42     	; 0xa7e <DIO_setPortValue+0x2e>
	{
		switch(PortId)
     a54:	81 30       	cpi	r24, 0x01	; 1
     a56:	51 f0       	breq	.+20     	; 0xa6c <DIO_setPortValue+0x1c>
     a58:	81 30       	cpi	r24, 0x01	; 1
     a5a:	28 f0       	brcs	.+10     	; 0xa66 <DIO_setPortValue+0x16>
     a5c:	82 30       	cpi	r24, 0x02	; 2
     a5e:	49 f0       	breq	.+18     	; 0xa72 <DIO_setPortValue+0x22>
     a60:	83 30       	cpi	r24, 0x03	; 3
     a62:	79 f4       	brne	.+30     	; 0xa82 <DIO_setPortValue+0x32>
     a64:	09 c0       	rjmp	.+18     	; 0xa78 <DIO_setPortValue+0x28>
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
     a66:	6b bb       	out	0x1b, r22	; 27
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     a68:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
			break;
     a6a:	08 95       	ret
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
     a6c:	68 bb       	out	0x18, r22	; 24
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     a6e:	80 e0       	ldi	r24, 0x00	; 0
			PORTA_REG=PortValue;
			break;
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
			break;
     a70:	08 95       	ret
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
     a72:	65 bb       	out	0x15, r22	; 21
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     a74:	80 e0       	ldi	r24, 0x00	; 0
			PORTB_REG=PortValue;
			break;
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
			break;
     a76:	08 95       	ret
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
     a78:	62 bb       	out	0x12, r22	; 18
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     a7a:	80 e0       	ldi	r24, 0x00	; 0
			PORTC_REG=PortValue;
			break;
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
			break;
     a7c:	08 95       	ret
		}
	}
	else
	{
	ErrorStatus = DIO_NOK;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	08 95       	ret
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     a82:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
	ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     a84:	08 95       	ret

00000a86 <DIO_getPortValue>:


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) && (PortValue!=NULL) )
     a86:	84 30       	cpi	r24, 0x04	; 4
     a88:	00 f5       	brcc	.+64     	; 0xaca <DIO_getPortValue+0x44>
     a8a:	61 15       	cp	r22, r1
     a8c:	71 05       	cpc	r23, r1
     a8e:	f9 f0       	breq	.+62     	; 0xace <DIO_getPortValue+0x48>
	{
		switch(PortId)
     a90:	81 30       	cpi	r24, 0x01	; 1
     a92:	61 f0       	breq	.+24     	; 0xaac <DIO_getPortValue+0x26>
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	28 f0       	brcs	.+10     	; 0xaa2 <DIO_getPortValue+0x1c>
     a98:	82 30       	cpi	r24, 0x02	; 2
     a9a:	69 f0       	breq	.+26     	; 0xab6 <DIO_getPortValue+0x30>
     a9c:	83 30       	cpi	r24, 0x03	; 3
     a9e:	c9 f4       	brne	.+50     	; 0xad2 <DIO_getPortValue+0x4c>
     aa0:	0f c0       	rjmp	.+30     	; 0xac0 <DIO_getPortValue+0x3a>
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
     aa2:	8b b3       	in	r24, 0x1b	; 27
     aa4:	fb 01       	movw	r30, r22
     aa6:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     aa8:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
			break;
     aaa:	08 95       	ret
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
     aac:	88 b3       	in	r24, 0x18	; 24
     aae:	fb 01       	movw	r30, r22
     ab0:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     ab2:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTA_REG;
			break;
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
			break;
     ab4:	08 95       	ret
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
     ab6:	85 b3       	in	r24, 0x15	; 21
     ab8:	fb 01       	movw	r30, r22
     aba:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     abc:	80 e0       	ldi	r24, 0x00	; 0
		    *PortValue =PORTB_REG;
			break;
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
			break;
     abe:	08 95       	ret
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
     ac0:	82 b3       	in	r24, 0x12	; 18
     ac2:	fb 01       	movw	r30, r22
     ac4:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     ac6:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTC_REG;
			break;
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
			break;
     ac8:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	08 95       	ret
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	08 95       	ret
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     ad2:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     ad4:	08 95       	ret

00000ad6 <DIO_togglePortValue>:


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
     ad6:	84 30       	cpi	r24, 0x04	; 4
     ad8:	e8 f4       	brcc	.+58     	; 0xb14 <DIO_togglePortValue+0x3e>
	{
		switch(PortId)
     ada:	81 30       	cpi	r24, 0x01	; 1
     adc:	61 f0       	breq	.+24     	; 0xaf6 <DIO_togglePortValue+0x20>
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	28 f0       	brcs	.+10     	; 0xaec <DIO_togglePortValue+0x16>
     ae2:	82 30       	cpi	r24, 0x02	; 2
     ae4:	69 f0       	breq	.+26     	; 0xb00 <DIO_togglePortValue+0x2a>
     ae6:	83 30       	cpi	r24, 0x03	; 3
     ae8:	b9 f4       	brne	.+46     	; 0xb18 <DIO_togglePortValue+0x42>
     aea:	0f c0       	rjmp	.+30     	; 0xb0a <DIO_togglePortValue+0x34>
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
     aec:	8b b3       	in	r24, 0x1b	; 27
     aee:	80 95       	com	r24
     af0:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     af2:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
			break;
     af4:	08 95       	ret
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
     af6:	88 b3       	in	r24, 0x18	; 24
     af8:	80 95       	com	r24
     afa:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     afc:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
			break;
     afe:	08 95       	ret
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
     b00:	85 b3       	in	r24, 0x15	; 21
     b02:	80 95       	com	r24
     b04:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     b06:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
			break;
     b08:	08 95       	ret
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
     b0a:	82 b3       	in	r24, 0x12	; 18
     b0c:	80 95       	com	r24
     b0e:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     b10:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
			break;
     b12:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 95       	ret
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     b18:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     b1a:	08 95       	ret

00000b1c <DIO_activePortInPullUpResistance>:


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
     b1c:	84 30       	cpi	r24, 0x04	; 4
     b1e:	e8 f4       	brcc	.+58     	; 0xb5a <DIO_activePortInPullUpResistance+0x3e>
	{
		switch(PortId)
     b20:	81 30       	cpi	r24, 0x01	; 1
     b22:	61 f0       	breq	.+24     	; 0xb3c <DIO_activePortInPullUpResistance+0x20>
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	28 f0       	brcs	.+10     	; 0xb32 <DIO_activePortInPullUpResistance+0x16>
     b28:	82 30       	cpi	r24, 0x02	; 2
     b2a:	69 f0       	breq	.+26     	; 0xb46 <DIO_activePortInPullUpResistance+0x2a>
     b2c:	83 30       	cpi	r24, 0x03	; 3
     b2e:	b9 f4       	brne	.+46     	; 0xb5e <DIO_activePortInPullUpResistance+0x42>
     b30:	0f c0       	rjmp	.+30     	; 0xb50 <DIO_activePortInPullUpResistance+0x34>
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
     b32:	8b b3       	in	r24, 0x1b	; 27
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     b38:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
			break;
     b3a:	08 95       	ret
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
     b3c:	88 b3       	in	r24, 0x18	; 24
     b3e:	8f ef       	ldi	r24, 0xFF	; 255
     b40:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     b42:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
			break;
     b44:	08 95       	ret
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
     b46:	85 b3       	in	r24, 0x15	; 21
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     b4c:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
			break;
     b4e:	08 95       	ret
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
     b50:	82 b3       	in	r24, 0x12	; 18
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     b56:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
			break;
     b58:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	08 95       	ret
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
     b5e:	80 e0       	ldi	r24, 0x00	; 0
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
	
}
     b60:	08 95       	ret

00000b62 <EXTI_Enable>:
static void (*PRIVATE_PtrCallBackInt1) (void) = NULL;
static void (*PRIVATE_PtrCallBackInt2) (void) = NULL;

void EXTI_Enable(EXTI_InterruptSource InterruptSource ,EXTI_TriggerEdge TriggerEdge)
{
	switch(InterruptSource)
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	71 f1       	breq	.+92     	; 0xbc2 <EXTI_Enable+0x60>
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	20 f0       	brcs	.+8      	; 0xb72 <EXTI_Enable+0x10>
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	09 f0       	breq	.+2      	; 0xb70 <EXTI_Enable+0xe>
     b6e:	60 c0       	rjmp	.+192    	; 0xc30 <EXTI_Enable+0xce>
     b70:	50 c0       	rjmp	.+160    	; 0xc12 <EXTI_Enable+0xb0>
	{
		case EXTI_INT0:
		switch(TriggerEdge)
     b72:	61 30       	cpi	r22, 0x01	; 1
     b74:	71 f0       	breq	.+28     	; 0xb92 <EXTI_Enable+0x30>
     b76:	61 30       	cpi	r22, 0x01	; 1
     b78:	28 f0       	brcs	.+10     	; 0xb84 <EXTI_Enable+0x22>
     b7a:	62 30       	cpi	r22, 0x02	; 2
     b7c:	89 f0       	breq	.+34     	; 0xba0 <EXTI_Enable+0x3e>
     b7e:	63 30       	cpi	r22, 0x03	; 3
     b80:	e1 f4       	brne	.+56     	; 0xbba <EXTI_Enable+0x58>
     b82:	15 c0       	rjmp	.+42     	; 0xbae <EXTI_Enable+0x4c>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
     b84:	85 b7       	in	r24, 0x35	; 53
     b86:	81 60       	ori	r24, 0x01	; 1
     b88:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
     b8a:	85 b7       	in	r24, 0x35	; 53
     b8c:	82 60       	ori	r24, 0x02	; 2
     b8e:	85 bf       	out	0x35, r24	; 53
			break;
     b90:	14 c0       	rjmp	.+40     	; 0xbba <EXTI_Enable+0x58>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00);
     b92:	85 b7       	in	r24, 0x35	; 53
     b94:	8e 7f       	andi	r24, 0xFE	; 254
     b96:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
     b98:	85 b7       	in	r24, 0x35	; 53
     b9a:	82 60       	ori	r24, 0x02	; 2
     b9c:	85 bf       	out	0x35, r24	; 53
			break;
     b9e:	0d c0       	rjmp	.+26     	; 0xbba <EXTI_Enable+0x58>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00);
     ba0:	85 b7       	in	r24, 0x35	; 53
     ba2:	8e 7f       	andi	r24, 0xFE	; 254
     ba4:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
     ba6:	85 b7       	in	r24, 0x35	; 53
     ba8:	8d 7f       	andi	r24, 0xFD	; 253
     baa:	85 bf       	out	0x35, r24	; 53
			break;
     bac:	06 c0       	rjmp	.+12     	; 0xbba <EXTI_Enable+0x58>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00);
     bae:	85 b7       	in	r24, 0x35	; 53
     bb0:	81 60       	ori	r24, 0x01	; 1
     bb2:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01);
     bb4:	85 b7       	in	r24, 0x35	; 53
     bb6:	8d 7f       	andi	r24, 0xFD	; 253
     bb8:	85 bf       	out	0x35, r24	; 53
			break;
		}
		SET_BIT(GICR,INT0);
     bba:	8b b7       	in	r24, 0x3b	; 59
     bbc:	80 64       	ori	r24, 0x40	; 64
     bbe:	8b bf       	out	0x3b, r24	; 59
		break;
     bc0:	08 95       	ret
		
		case EXTI_INT1:
		switch(TriggerEdge)
     bc2:	61 30       	cpi	r22, 0x01	; 1
     bc4:	71 f0       	breq	.+28     	; 0xbe2 <EXTI_Enable+0x80>
     bc6:	61 30       	cpi	r22, 0x01	; 1
     bc8:	28 f0       	brcs	.+10     	; 0xbd4 <EXTI_Enable+0x72>
     bca:	62 30       	cpi	r22, 0x02	; 2
     bcc:	89 f0       	breq	.+34     	; 0xbf0 <EXTI_Enable+0x8e>
     bce:	63 30       	cpi	r22, 0x03	; 3
     bd0:	e1 f4       	brne	.+56     	; 0xc0a <EXTI_Enable+0xa8>
     bd2:	15 c0       	rjmp	.+42     	; 0xbfe <EXTI_Enable+0x9c>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
     bd4:	85 b7       	in	r24, 0x35	; 53
     bd6:	84 60       	ori	r24, 0x04	; 4
     bd8:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
     bda:	85 b7       	in	r24, 0x35	; 53
     bdc:	88 60       	ori	r24, 0x08	; 8
     bde:	85 bf       	out	0x35, r24	; 53
			break;
     be0:	14 c0       	rjmp	.+40     	; 0xc0a <EXTI_Enable+0xa8>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10);
     be2:	85 b7       	in	r24, 0x35	; 53
     be4:	8b 7f       	andi	r24, 0xFB	; 251
     be6:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11);
     be8:	85 b7       	in	r24, 0x35	; 53
     bea:	88 60       	ori	r24, 0x08	; 8
     bec:	85 bf       	out	0x35, r24	; 53
			break;
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <EXTI_Enable+0xa8>
			
			case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10);
     bf0:	85 b7       	in	r24, 0x35	; 53
     bf2:	8b 7f       	andi	r24, 0xFB	; 251
     bf4:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
     bf6:	85 b7       	in	r24, 0x35	; 53
     bf8:	87 7f       	andi	r24, 0xF7	; 247
     bfa:	85 bf       	out	0x35, r24	; 53
			break;
     bfc:	06 c0       	rjmp	.+12     	; 0xc0a <EXTI_Enable+0xa8>
			
			case EXTI_ANY_LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC10);
     bfe:	85 b7       	in	r24, 0x35	; 53
     c00:	84 60       	ori	r24, 0x04	; 4
     c02:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11);
     c04:	85 b7       	in	r24, 0x35	; 53
     c06:	87 7f       	andi	r24, 0xF7	; 247
     c08:	85 bf       	out	0x35, r24	; 53
			break;
		}
		SET_BIT(GICR,INT1);
     c0a:	8b b7       	in	r24, 0x3b	; 59
     c0c:	80 68       	ori	r24, 0x80	; 128
     c0e:	8b bf       	out	0x3b, r24	; 59
		break;
     c10:	08 95       	ret
		
		case EXTI_INT2:
		switch(TriggerEdge)
     c12:	66 23       	and	r22, r22
     c14:	19 f0       	breq	.+6      	; 0xc1c <EXTI_Enable+0xba>
     c16:	61 30       	cpi	r22, 0x01	; 1
     c18:	41 f4       	brne	.+16     	; 0xc2a <EXTI_Enable+0xc8>
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <EXTI_Enable+0xc2>
		{
			case EXTI_RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
     c1c:	84 b7       	in	r24, 0x34	; 52
     c1e:	80 64       	ori	r24, 0x40	; 64
     c20:	84 bf       	out	0x34, r24	; 52
			break;
     c22:	03 c0       	rjmp	.+6      	; 0xc2a <EXTI_Enable+0xc8>
			
			case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2);
     c24:	84 b7       	in	r24, 0x34	; 52
     c26:	8f 7b       	andi	r24, 0xBF	; 191
     c28:	84 bf       	out	0x34, r24	; 52
			break;
		}
		SET_BIT(GICR,INT2);
     c2a:	8b b7       	in	r24, 0x3b	; 59
     c2c:	80 62       	ori	r24, 0x20	; 32
     c2e:	8b bf       	out	0x3b, r24	; 59
     c30:	08 95       	ret

00000c32 <EXTI_Disable>:
	}
}

void EXTI_Disable(EXTI_InterruptSource InterruptSource)
{
	switch(InterruptSource)
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	49 f0       	breq	.+18     	; 0xc48 <EXTI_Disable+0x16>
     c36:	81 30       	cpi	r24, 0x01	; 1
     c38:	18 f0       	brcs	.+6      	; 0xc40 <EXTI_Disable+0xe>
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	61 f4       	brne	.+24     	; 0xc56 <EXTI_Disable+0x24>
     c3e:	08 c0       	rjmp	.+16     	; 0xc50 <EXTI_Disable+0x1e>
	{
		case EXTI_INT0:
		CLR_BIT(GICR,INT0);
     c40:	8b b7       	in	r24, 0x3b	; 59
     c42:	8f 7b       	andi	r24, 0xBF	; 191
     c44:	8b bf       	out	0x3b, r24	; 59
		break;
     c46:	08 95       	ret
		
		case EXTI_INT1:
		CLR_BIT(GICR,INT1);
     c48:	8b b7       	in	r24, 0x3b	; 59
     c4a:	8f 77       	andi	r24, 0x7F	; 127
     c4c:	8b bf       	out	0x3b, r24	; 59
		break;
     c4e:	08 95       	ret
		
		case EXTI_INT2:
		CLR_BIT(GICR,INT2);
     c50:	8b b7       	in	r24, 0x3b	; 59
     c52:	8f 7d       	andi	r24, 0xDF	; 223
     c54:	8b bf       	out	0x3b, r24	; 59
     c56:	08 95       	ret

00000c58 <EXTI_SetCallBackInt0>:
	}
	
}
void EXTI_SetCallBackInt0 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	21 f0       	breq	.+8      	; 0xc64 <EXTI_SetCallBackInt0+0xc>
	{
		PRIVATE_PtrCallBackInt0=PtrToFunc;
     c5c:	90 93 71 00 	sts	0x0071, r25
     c60:	80 93 70 00 	sts	0x0070, r24
     c64:	08 95       	ret

00000c66 <EXTI_SetCallBackInt1>:
	}
}
void EXTI_SetCallBackInt1 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	21 f0       	breq	.+8      	; 0xc72 <EXTI_SetCallBackInt1+0xc>
	{
		PRIVATE_PtrCallBackInt1=PtrToFunc;
     c6a:	90 93 73 00 	sts	0x0073, r25
     c6e:	80 93 72 00 	sts	0x0072, r24
     c72:	08 95       	ret

00000c74 <EXTI_SetCallBackInt2>:
	}
}
void EXTI_SetCallBackInt2 (void (*PtrToFunc) (void))
{
	if( PtrToFunc!=NULL )
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	21 f0       	breq	.+8      	; 0xc80 <EXTI_SetCallBackInt2+0xc>
	{
		PRIVATE_PtrCallBackInt2=PtrToFunc;
     c78:	90 93 75 00 	sts	0x0075, r25
     c7c:	80 93 74 00 	sts	0x0074, r24
     c80:	08 95       	ret

00000c82 <__vector_1>:
}


void  __vector_1(void) __attribute__((signal)); 
void  __vector_1(void)
{
     c82:	1f 92       	push	r1
     c84:	0f 92       	push	r0
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	0f 92       	push	r0
     c8a:	11 24       	eor	r1, r1
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	ef 93       	push	r30
     ca2:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackInt0 != NULL)
     ca4:	e0 91 70 00 	lds	r30, 0x0070
     ca8:	f0 91 71 00 	lds	r31, 0x0071
     cac:	30 97       	sbiw	r30, 0x00	; 0
     cae:	09 f0       	breq	.+2      	; 0xcb2 <__vector_1+0x30>
	{
		PRIVATE_PtrCallBackInt0();
     cb0:	09 95       	icall
	}
}
     cb2:	ff 91       	pop	r31
     cb4:	ef 91       	pop	r30
     cb6:	bf 91       	pop	r27
     cb8:	af 91       	pop	r26
     cba:	9f 91       	pop	r25
     cbc:	8f 91       	pop	r24
     cbe:	7f 91       	pop	r23
     cc0:	6f 91       	pop	r22
     cc2:	5f 91       	pop	r21
     cc4:	4f 91       	pop	r20
     cc6:	3f 91       	pop	r19
     cc8:	2f 91       	pop	r18
     cca:	0f 90       	pop	r0
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	0f 90       	pop	r0
     cd0:	1f 90       	pop	r1
     cd2:	18 95       	reti

00000cd4 <__vector_2>:

void  __vector_2(void) __attribute__((signal));
void  __vector_2(void)
{
     cd4:	1f 92       	push	r1
     cd6:	0f 92       	push	r0
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	0f 92       	push	r0
     cdc:	11 24       	eor	r1, r1
     cde:	2f 93       	push	r18
     ce0:	3f 93       	push	r19
     ce2:	4f 93       	push	r20
     ce4:	5f 93       	push	r21
     ce6:	6f 93       	push	r22
     ce8:	7f 93       	push	r23
     cea:	8f 93       	push	r24
     cec:	9f 93       	push	r25
     cee:	af 93       	push	r26
     cf0:	bf 93       	push	r27
     cf2:	ef 93       	push	r30
     cf4:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackInt1 != NULL)
     cf6:	e0 91 72 00 	lds	r30, 0x0072
     cfa:	f0 91 73 00 	lds	r31, 0x0073
     cfe:	30 97       	sbiw	r30, 0x00	; 0
     d00:	09 f0       	breq	.+2      	; 0xd04 <__vector_2+0x30>
	{
		PRIVATE_PtrCallBackInt1();
     d02:	09 95       	icall
	}
}
     d04:	ff 91       	pop	r31
     d06:	ef 91       	pop	r30
     d08:	bf 91       	pop	r27
     d0a:	af 91       	pop	r26
     d0c:	9f 91       	pop	r25
     d0e:	8f 91       	pop	r24
     d10:	7f 91       	pop	r23
     d12:	6f 91       	pop	r22
     d14:	5f 91       	pop	r21
     d16:	4f 91       	pop	r20
     d18:	3f 91       	pop	r19
     d1a:	2f 91       	pop	r18
     d1c:	0f 90       	pop	r0
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	0f 90       	pop	r0
     d22:	1f 90       	pop	r1
     d24:	18 95       	reti

00000d26 <__vector_3>:



void  __vector_3(void) __attribute__((signal)); 
void  __vector_3(void)
{
     d26:	1f 92       	push	r1
     d28:	0f 92       	push	r0
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	0f 92       	push	r0
     d2e:	11 24       	eor	r1, r1
     d30:	2f 93       	push	r18
     d32:	3f 93       	push	r19
     d34:	4f 93       	push	r20
     d36:	5f 93       	push	r21
     d38:	6f 93       	push	r22
     d3a:	7f 93       	push	r23
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25
     d40:	af 93       	push	r26
     d42:	bf 93       	push	r27
     d44:	ef 93       	push	r30
     d46:	ff 93       	push	r31
	if (PRIVATE_PtrCallBackInt2 != NULL)
     d48:	e0 91 74 00 	lds	r30, 0x0074
     d4c:	f0 91 75 00 	lds	r31, 0x0075
     d50:	30 97       	sbiw	r30, 0x00	; 0
     d52:	09 f0       	breq	.+2      	; 0xd56 <__vector_3+0x30>
	{
		PRIVATE_PtrCallBackInt2();
     d54:	09 95       	icall
	}
     d56:	ff 91       	pop	r31
     d58:	ef 91       	pop	r30
     d5a:	bf 91       	pop	r27
     d5c:	af 91       	pop	r26
     d5e:	9f 91       	pop	r25
     d60:	8f 91       	pop	r24
     d62:	7f 91       	pop	r23
     d64:	6f 91       	pop	r22
     d66:	5f 91       	pop	r21
     d68:	4f 91       	pop	r20
     d6a:	3f 91       	pop	r19
     d6c:	2f 91       	pop	r18
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	0f 90       	pop	r0
     d74:	1f 90       	pop	r1
     d76:	18 95       	reti

00000d78 <GLBI_Enable>:
#include "GLBI_interfase.h"
#include "GLBI_private.h"
 
 void GLBI_Enable()
 {
	 SET_BIT(SREG,I);
     d78:	8f b7       	in	r24, 0x3f	; 63
     d7a:	80 68       	ori	r24, 0x80	; 128
     d7c:	8f bf       	out	0x3f, r24	; 63
     d7e:	08 95       	ret

00000d80 <UART_init>:

#define UART_UBBR_VALUE (((F_CPU)/(UART_SelectedBoudRate*16UL))-1)

void UART_init (void)
{
	CLR_BIT(UCSRB,UCSZ2);
     d80:	52 98       	cbi	0x0a, 2	; 10
	CLR_BIT(UCSRC_Value,UPM0);
	CLR_BIT(UCSRC_Value,UPM1);
	CLR_BIT(UCSRC_Value,UMSEL);
	SET_BIT(UCSRC_Value,URSEL);
	
	UCSRC=UCSRC_Value;      // Set UART Mode: 8-bit data, 1 stop bit, no parity (0x86)
     d82:	86 e8       	ldi	r24, 0x86	; 134
     d84:	80 bd       	out	0x20, r24	; 32
	
	UBRRL=UART_UBBR_VALUE;     // Set baud rate = 9600 -> 103;
     d86:	87 e6       	ldi	r24, 0x67	; 103
     d88:	89 b9       	out	0x09, r24	; 9
    UBRRH = (UART_UBBR_VALUE >> 8);
     d8a:	10 bc       	out	0x20, r1	; 32
	
	CLR_BIT(UCSRA,U2X);   // Stop double speed
     d8c:	59 98       	cbi	0x0b, 1	; 11
	
	
	SET_BIT(UCSRB,RXCIE);  // Enable Rx Interrupt 
     d8e:	57 9a       	sbi	0x0a, 7	; 10
	SET_BIT(UCSRB,TXCIE);  // Enable Tx Interrupt 
     d90:	56 9a       	sbi	0x0a, 6	; 10
	SET_BIT(UCSRB,UDRIE);  // Enable UDR Interrupt 
     d92:	55 9a       	sbi	0x0a, 5	; 10
	
	SET_BIT(UCSRB,TXEN);  // Enable Tx
     d94:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);  // Enable Rx
     d96:	54 9a       	sbi	0x0a, 4	; 10
}
     d98:	08 95       	ret

00000d9a <UART_ReceiveChar>:

void UART_ReceiveChar (u8* ReceiveData)
{
	if(ReceiveData!=NULL)
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	29 f0       	breq	.+10     	; 0xda8 <UART_ReceiveChar+0xe>
	{
		while(0 == GET_BIT(UCSRA,RXC));
     d9e:	5f 9b       	sbis	0x0b, 7	; 11
     da0:	fe cf       	rjmp	.-4      	; 0xd9e <UART_ReceiveChar+0x4>
		*ReceiveData=UDR;
     da2:	2c b1       	in	r18, 0x0c	; 12
     da4:	fc 01       	movw	r30, r24
     da6:	20 83       	st	Z, r18
     da8:	08 95       	ret

00000daa <UART_TransmiteChar>:



void UART_TransmiteChar(u8 TransmiteData)
{
	UDR=TransmiteData;
     daa:	8c b9       	out	0x0c, r24	; 12
	while(0 == GET_BIT(UCSRA,UDRE));
     dac:	8b b1       	in	r24, 0x0b	; 11
     dae:	85 ff       	sbrs	r24, 5
     db0:	fd cf       	rjmp	.-6      	; 0xdac <UART_TransmiteChar+0x2>
}
     db2:	08 95       	ret

00000db4 <UART_TransmiteString>:

void UART_TransmiteString(u8 *TransmiteData)
{
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	8c 01       	movw	r16, r24
	u8 Index=0;

	while (TransmiteData[Index]!='\0')		/* Send string till null */
     dbc:	fc 01       	movw	r30, r24
     dbe:	80 81       	ld	r24, Z
     dc0:	88 23       	and	r24, r24
     dc2:	51 f0       	breq	.+20     	; 0xdd8 <UART_TransmiteString+0x24>
	while(0 == GET_BIT(UCSRA,UDRE));
}

void UART_TransmiteString(u8 *TransmiteData)
{
	u8 Index=0;
     dc4:	c0 e0       	ldi	r28, 0x00	; 0

	while (TransmiteData[Index]!='\0')		/* Send string till null */
	{
		UART_TransmiteChar(TransmiteData[Index]);
     dc6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <UART_TransmiteChar>
		Index++;
     dca:	cf 5f       	subi	r28, 0xFF	; 255

void UART_TransmiteString(u8 *TransmiteData)
{
	u8 Index=0;

	while (TransmiteData[Index]!='\0')		/* Send string till null */
     dcc:	f8 01       	movw	r30, r16
     dce:	ec 0f       	add	r30, r28
     dd0:	f1 1d       	adc	r31, r1
     dd2:	80 81       	ld	r24, Z
     dd4:	88 23       	and	r24, r24
     dd6:	b9 f7       	brne	.-18     	; 0xdc6 <UART_TransmiteString+0x12>
	{
		UART_TransmiteChar(TransmiteData[Index]);
		Index++;
	}
}
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	08 95       	ret

00000de0 <UART_CallBack_RXC>:

void UART_CallBack_RXC (void(*PtrFunction)(void))
{
	Private_UART_CallBack_RXC=PtrFunction;
     de0:	90 93 77 00 	sts	0x0077, r25
     de4:	80 93 76 00 	sts	0x0076, r24
}
     de8:	08 95       	ret

00000dea <UART_CallBack_UDRE>:

void UART_CallBack_UDRE(void(*PtrFunction)(void))
{
	Private_UART_CallBack_UDRE=PtrFunction;
     dea:	90 93 79 00 	sts	0x0079, r25
     dee:	80 93 78 00 	sts	0x0078, r24
}
     df2:	08 95       	ret

00000df4 <UART_CallBack_TXC>:

void UART_CallBack_TXC(void(*PtrFunction)(void))
{
	Private_UART_CallBack_TXC=PtrFunction;
     df4:	90 93 7b 00 	sts	0x007B, r25
     df8:	80 93 7a 00 	sts	0x007A, r24
}
     dfc:	08 95       	ret

00000dfe <__vector_13>:


// Receive Complete Interrupt Request
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     dfe:	1f 92       	push	r1
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	0f 92       	push	r0
     e06:	11 24       	eor	r1, r1
     e08:	2f 93       	push	r18
     e0a:	3f 93       	push	r19
     e0c:	4f 93       	push	r20
     e0e:	5f 93       	push	r21
     e10:	6f 93       	push	r22
     e12:	7f 93       	push	r23
     e14:	8f 93       	push	r24
     e16:	9f 93       	push	r25
     e18:	af 93       	push	r26
     e1a:	bf 93       	push	r27
     e1c:	ef 93       	push	r30
     e1e:	ff 93       	push	r31
	if (Private_UART_CallBack_RXC!=NULL)
     e20:	e0 91 76 00 	lds	r30, 0x0076
     e24:	f0 91 77 00 	lds	r31, 0x0077
     e28:	30 97       	sbiw	r30, 0x00	; 0
     e2a:	09 f0       	breq	.+2      	; 0xe2e <__vector_13+0x30>
	{
		Private_UART_CallBack_RXC();
     e2c:	09 95       	icall
	}
}
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	bf 91       	pop	r27
     e34:	af 91       	pop	r26
     e36:	9f 91       	pop	r25
     e38:	8f 91       	pop	r24
     e3a:	7f 91       	pop	r23
     e3c:	6f 91       	pop	r22
     e3e:	5f 91       	pop	r21
     e40:	4f 91       	pop	r20
     e42:	3f 91       	pop	r19
     e44:	2f 91       	pop	r18
     e46:	0f 90       	pop	r0
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	0f 90       	pop	r0
     e4c:	1f 90       	pop	r1
     e4e:	18 95       	reti

00000e50 <__vector_14>:

// Data Register Empty Interrupt Request
void __vector_14(void) __attribute__((signal));
void __vector_14()
{
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
	if (Private_UART_CallBack_UDRE!=NULL)
     e72:	e0 91 78 00 	lds	r30, 0x0078
     e76:	f0 91 79 00 	lds	r31, 0x0079
     e7a:	30 97       	sbiw	r30, 0x00	; 0
     e7c:	09 f0       	breq	.+2      	; 0xe80 <__vector_14+0x30>
	{
		Private_UART_CallBack_UDRE();
     e7e:	09 95       	icall
	} 
}
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	0f 90       	pop	r0
     e9e:	1f 90       	pop	r1
     ea0:	18 95       	reti

00000ea2 <__vector_15>:

// Transmit Complete Interrupt Request
void __vector_15(void) __attribute__((signal));
void __vector_15()
{
     ea2:	1f 92       	push	r1
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	2f 93       	push	r18
     eae:	3f 93       	push	r19
     eb0:	4f 93       	push	r20
     eb2:	5f 93       	push	r21
     eb4:	6f 93       	push	r22
     eb6:	7f 93       	push	r23
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	af 93       	push	r26
     ebe:	bf 93       	push	r27
     ec0:	ef 93       	push	r30
     ec2:	ff 93       	push	r31
	if (Private_UART_CallBack_TXC!=NULL)
     ec4:	e0 91 7a 00 	lds	r30, 0x007A
     ec8:	f0 91 7b 00 	lds	r31, 0x007B
     ecc:	30 97       	sbiw	r30, 0x00	; 0
     ece:	09 f0       	breq	.+2      	; 0xed2 <__vector_15+0x30>
	{
		Private_UART_CallBack_TXC();
     ed0:	09 95       	icall
	} 
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	0f 90       	pop	r0
     ef0:	1f 90       	pop	r1
     ef2:	18 95       	reti

00000ef4 <__subsf3>:
     ef4:	50 58       	subi	r21, 0x80	; 128

00000ef6 <__addsf3>:
     ef6:	bb 27       	eor	r27, r27
     ef8:	aa 27       	eor	r26, r26
     efa:	0e d0       	rcall	.+28     	; 0xf18 <__addsf3x>
     efc:	08 c1       	rjmp	.+528    	; 0x110e <__fp_round>
     efe:	f9 d0       	rcall	.+498    	; 0x10f2 <__fp_pscA>
     f00:	30 f0       	brcs	.+12     	; 0xf0e <__addsf3+0x18>
     f02:	fe d0       	rcall	.+508    	; 0x1100 <__fp_pscB>
     f04:	20 f0       	brcs	.+8      	; 0xf0e <__addsf3+0x18>
     f06:	31 f4       	brne	.+12     	; 0xf14 <__addsf3+0x1e>
     f08:	9f 3f       	cpi	r25, 0xFF	; 255
     f0a:	11 f4       	brne	.+4      	; 0xf10 <__addsf3+0x1a>
     f0c:	1e f4       	brtc	.+6      	; 0xf14 <__addsf3+0x1e>
     f0e:	ee c0       	rjmp	.+476    	; 0x10ec <__fp_nan>
     f10:	0e f4       	brtc	.+2      	; 0xf14 <__addsf3+0x1e>
     f12:	e0 95       	com	r30
     f14:	e7 fb       	bst	r30, 7
     f16:	e4 c0       	rjmp	.+456    	; 0x10e0 <__fp_inf>

00000f18 <__addsf3x>:
     f18:	e9 2f       	mov	r30, r25
     f1a:	0a d1       	rcall	.+532    	; 0x1130 <__fp_split3>
     f1c:	80 f3       	brcs	.-32     	; 0xefe <__addsf3+0x8>
     f1e:	ba 17       	cp	r27, r26
     f20:	62 07       	cpc	r22, r18
     f22:	73 07       	cpc	r23, r19
     f24:	84 07       	cpc	r24, r20
     f26:	95 07       	cpc	r25, r21
     f28:	18 f0       	brcs	.+6      	; 0xf30 <__addsf3x+0x18>
     f2a:	71 f4       	brne	.+28     	; 0xf48 <__addsf3x+0x30>
     f2c:	9e f5       	brtc	.+102    	; 0xf94 <__addsf3x+0x7c>
     f2e:	22 c1       	rjmp	.+580    	; 0x1174 <__fp_zero>
     f30:	0e f4       	brtc	.+2      	; 0xf34 <__addsf3x+0x1c>
     f32:	e0 95       	com	r30
     f34:	0b 2e       	mov	r0, r27
     f36:	ba 2f       	mov	r27, r26
     f38:	a0 2d       	mov	r26, r0
     f3a:	0b 01       	movw	r0, r22
     f3c:	b9 01       	movw	r22, r18
     f3e:	90 01       	movw	r18, r0
     f40:	0c 01       	movw	r0, r24
     f42:	ca 01       	movw	r24, r20
     f44:	a0 01       	movw	r20, r0
     f46:	11 24       	eor	r1, r1
     f48:	ff 27       	eor	r31, r31
     f4a:	59 1b       	sub	r21, r25
     f4c:	99 f0       	breq	.+38     	; 0xf74 <__addsf3x+0x5c>
     f4e:	59 3f       	cpi	r21, 0xF9	; 249
     f50:	50 f4       	brcc	.+20     	; 0xf66 <__addsf3x+0x4e>
     f52:	50 3e       	cpi	r21, 0xE0	; 224
     f54:	68 f1       	brcs	.+90     	; 0xfb0 <__addsf3x+0x98>
     f56:	1a 16       	cp	r1, r26
     f58:	f0 40       	sbci	r31, 0x00	; 0
     f5a:	a2 2f       	mov	r26, r18
     f5c:	23 2f       	mov	r18, r19
     f5e:	34 2f       	mov	r19, r20
     f60:	44 27       	eor	r20, r20
     f62:	58 5f       	subi	r21, 0xF8	; 248
     f64:	f3 cf       	rjmp	.-26     	; 0xf4c <__addsf3x+0x34>
     f66:	46 95       	lsr	r20
     f68:	37 95       	ror	r19
     f6a:	27 95       	ror	r18
     f6c:	a7 95       	ror	r26
     f6e:	f0 40       	sbci	r31, 0x00	; 0
     f70:	53 95       	inc	r21
     f72:	c9 f7       	brne	.-14     	; 0xf66 <__addsf3x+0x4e>
     f74:	7e f4       	brtc	.+30     	; 0xf94 <__addsf3x+0x7c>
     f76:	1f 16       	cp	r1, r31
     f78:	ba 0b       	sbc	r27, r26
     f7a:	62 0b       	sbc	r22, r18
     f7c:	73 0b       	sbc	r23, r19
     f7e:	84 0b       	sbc	r24, r20
     f80:	ba f0       	brmi	.+46     	; 0xfb0 <__addsf3x+0x98>
     f82:	91 50       	subi	r25, 0x01	; 1
     f84:	a1 f0       	breq	.+40     	; 0xfae <__addsf3x+0x96>
     f86:	ff 0f       	add	r31, r31
     f88:	bb 1f       	adc	r27, r27
     f8a:	66 1f       	adc	r22, r22
     f8c:	77 1f       	adc	r23, r23
     f8e:	88 1f       	adc	r24, r24
     f90:	c2 f7       	brpl	.-16     	; 0xf82 <__addsf3x+0x6a>
     f92:	0e c0       	rjmp	.+28     	; 0xfb0 <__addsf3x+0x98>
     f94:	ba 0f       	add	r27, r26
     f96:	62 1f       	adc	r22, r18
     f98:	73 1f       	adc	r23, r19
     f9a:	84 1f       	adc	r24, r20
     f9c:	48 f4       	brcc	.+18     	; 0xfb0 <__addsf3x+0x98>
     f9e:	87 95       	ror	r24
     fa0:	77 95       	ror	r23
     fa2:	67 95       	ror	r22
     fa4:	b7 95       	ror	r27
     fa6:	f7 95       	ror	r31
     fa8:	9e 3f       	cpi	r25, 0xFE	; 254
     faa:	08 f0       	brcs	.+2      	; 0xfae <__addsf3x+0x96>
     fac:	b3 cf       	rjmp	.-154    	; 0xf14 <__addsf3+0x1e>
     fae:	93 95       	inc	r25
     fb0:	88 0f       	add	r24, r24
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <__addsf3x+0x9e>
     fb4:	99 27       	eor	r25, r25
     fb6:	ee 0f       	add	r30, r30
     fb8:	97 95       	ror	r25
     fba:	87 95       	ror	r24
     fbc:	08 95       	ret

00000fbe <__cmpsf2>:
     fbe:	6c d0       	rcall	.+216    	; 0x1098 <__fp_cmp>
     fc0:	08 f4       	brcc	.+2      	; 0xfc4 <__cmpsf2+0x6>
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	08 95       	ret

00000fc6 <__fixunssfsi>:
     fc6:	bc d0       	rcall	.+376    	; 0x1140 <__fp_splitA>
     fc8:	88 f0       	brcs	.+34     	; 0xfec <__fixunssfsi+0x26>
     fca:	9f 57       	subi	r25, 0x7F	; 127
     fcc:	90 f0       	brcs	.+36     	; 0xff2 <__fixunssfsi+0x2c>
     fce:	b9 2f       	mov	r27, r25
     fd0:	99 27       	eor	r25, r25
     fd2:	b7 51       	subi	r27, 0x17	; 23
     fd4:	a0 f0       	brcs	.+40     	; 0xffe <__fixunssfsi+0x38>
     fd6:	d1 f0       	breq	.+52     	; 0x100c <__fixunssfsi+0x46>
     fd8:	66 0f       	add	r22, r22
     fda:	77 1f       	adc	r23, r23
     fdc:	88 1f       	adc	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	1a f0       	brmi	.+6      	; 0xfe8 <__fixunssfsi+0x22>
     fe2:	ba 95       	dec	r27
     fe4:	c9 f7       	brne	.-14     	; 0xfd8 <__fixunssfsi+0x12>
     fe6:	12 c0       	rjmp	.+36     	; 0x100c <__fixunssfsi+0x46>
     fe8:	b1 30       	cpi	r27, 0x01	; 1
     fea:	81 f0       	breq	.+32     	; 0x100c <__fixunssfsi+0x46>
     fec:	c3 d0       	rcall	.+390    	; 0x1174 <__fp_zero>
     fee:	b1 e0       	ldi	r27, 0x01	; 1
     ff0:	08 95       	ret
     ff2:	c0 c0       	rjmp	.+384    	; 0x1174 <__fp_zero>
     ff4:	67 2f       	mov	r22, r23
     ff6:	78 2f       	mov	r23, r24
     ff8:	88 27       	eor	r24, r24
     ffa:	b8 5f       	subi	r27, 0xF8	; 248
     ffc:	39 f0       	breq	.+14     	; 0x100c <__fixunssfsi+0x46>
     ffe:	b9 3f       	cpi	r27, 0xF9	; 249
    1000:	cc f3       	brlt	.-14     	; 0xff4 <__fixunssfsi+0x2e>
    1002:	86 95       	lsr	r24
    1004:	77 95       	ror	r23
    1006:	67 95       	ror	r22
    1008:	b3 95       	inc	r27
    100a:	d9 f7       	brne	.-10     	; 0x1002 <__fixunssfsi+0x3c>
    100c:	3e f4       	brtc	.+14     	; 0x101c <__fixunssfsi+0x56>
    100e:	90 95       	com	r25
    1010:	80 95       	com	r24
    1012:	70 95       	com	r23
    1014:	61 95       	neg	r22
    1016:	7f 4f       	sbci	r23, 0xFF	; 255
    1018:	8f 4f       	sbci	r24, 0xFF	; 255
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	08 95       	ret

0000101e <__floatunsisf>:
    101e:	e8 94       	clt
    1020:	09 c0       	rjmp	.+18     	; 0x1034 <__floatsisf+0x12>

00001022 <__floatsisf>:
    1022:	97 fb       	bst	r25, 7
    1024:	3e f4       	brtc	.+14     	; 0x1034 <__floatsisf+0x12>
    1026:	90 95       	com	r25
    1028:	80 95       	com	r24
    102a:	70 95       	com	r23
    102c:	61 95       	neg	r22
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	8f 4f       	sbci	r24, 0xFF	; 255
    1032:	9f 4f       	sbci	r25, 0xFF	; 255
    1034:	99 23       	and	r25, r25
    1036:	a9 f0       	breq	.+42     	; 0x1062 <__floatsisf+0x40>
    1038:	f9 2f       	mov	r31, r25
    103a:	96 e9       	ldi	r25, 0x96	; 150
    103c:	bb 27       	eor	r27, r27
    103e:	93 95       	inc	r25
    1040:	f6 95       	lsr	r31
    1042:	87 95       	ror	r24
    1044:	77 95       	ror	r23
    1046:	67 95       	ror	r22
    1048:	b7 95       	ror	r27
    104a:	f1 11       	cpse	r31, r1
    104c:	f8 cf       	rjmp	.-16     	; 0x103e <__floatsisf+0x1c>
    104e:	fa f4       	brpl	.+62     	; 0x108e <__floatsisf+0x6c>
    1050:	bb 0f       	add	r27, r27
    1052:	11 f4       	brne	.+4      	; 0x1058 <__floatsisf+0x36>
    1054:	60 ff       	sbrs	r22, 0
    1056:	1b c0       	rjmp	.+54     	; 0x108e <__floatsisf+0x6c>
    1058:	6f 5f       	subi	r22, 0xFF	; 255
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	8f 4f       	sbci	r24, 0xFF	; 255
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	16 c0       	rjmp	.+44     	; 0x108e <__floatsisf+0x6c>
    1062:	88 23       	and	r24, r24
    1064:	11 f0       	breq	.+4      	; 0x106a <__floatsisf+0x48>
    1066:	96 e9       	ldi	r25, 0x96	; 150
    1068:	11 c0       	rjmp	.+34     	; 0x108c <__floatsisf+0x6a>
    106a:	77 23       	and	r23, r23
    106c:	21 f0       	breq	.+8      	; 0x1076 <__floatsisf+0x54>
    106e:	9e e8       	ldi	r25, 0x8E	; 142
    1070:	87 2f       	mov	r24, r23
    1072:	76 2f       	mov	r23, r22
    1074:	05 c0       	rjmp	.+10     	; 0x1080 <__floatsisf+0x5e>
    1076:	66 23       	and	r22, r22
    1078:	71 f0       	breq	.+28     	; 0x1096 <__floatsisf+0x74>
    107a:	96 e8       	ldi	r25, 0x86	; 134
    107c:	86 2f       	mov	r24, r22
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	2a f0       	brmi	.+10     	; 0x108e <__floatsisf+0x6c>
    1084:	9a 95       	dec	r25
    1086:	66 0f       	add	r22, r22
    1088:	77 1f       	adc	r23, r23
    108a:	88 1f       	adc	r24, r24
    108c:	da f7       	brpl	.-10     	; 0x1084 <__floatsisf+0x62>
    108e:	88 0f       	add	r24, r24
    1090:	96 95       	lsr	r25
    1092:	87 95       	ror	r24
    1094:	97 f9       	bld	r25, 7
    1096:	08 95       	ret

00001098 <__fp_cmp>:
    1098:	99 0f       	add	r25, r25
    109a:	00 08       	sbc	r0, r0
    109c:	55 0f       	add	r21, r21
    109e:	aa 0b       	sbc	r26, r26
    10a0:	e0 e8       	ldi	r30, 0x80	; 128
    10a2:	fe ef       	ldi	r31, 0xFE	; 254
    10a4:	16 16       	cp	r1, r22
    10a6:	17 06       	cpc	r1, r23
    10a8:	e8 07       	cpc	r30, r24
    10aa:	f9 07       	cpc	r31, r25
    10ac:	c0 f0       	brcs	.+48     	; 0x10de <__fp_cmp+0x46>
    10ae:	12 16       	cp	r1, r18
    10b0:	13 06       	cpc	r1, r19
    10b2:	e4 07       	cpc	r30, r20
    10b4:	f5 07       	cpc	r31, r21
    10b6:	98 f0       	brcs	.+38     	; 0x10de <__fp_cmp+0x46>
    10b8:	62 1b       	sub	r22, r18
    10ba:	73 0b       	sbc	r23, r19
    10bc:	84 0b       	sbc	r24, r20
    10be:	95 0b       	sbc	r25, r21
    10c0:	39 f4       	brne	.+14     	; 0x10d0 <__fp_cmp+0x38>
    10c2:	0a 26       	eor	r0, r26
    10c4:	61 f0       	breq	.+24     	; 0x10de <__fp_cmp+0x46>
    10c6:	23 2b       	or	r18, r19
    10c8:	24 2b       	or	r18, r20
    10ca:	25 2b       	or	r18, r21
    10cc:	21 f4       	brne	.+8      	; 0x10d6 <__fp_cmp+0x3e>
    10ce:	08 95       	ret
    10d0:	0a 26       	eor	r0, r26
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <__fp_cmp+0x3e>
    10d4:	a1 40       	sbci	r26, 0x01	; 1
    10d6:	a6 95       	lsr	r26
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	81 1d       	adc	r24, r1
    10dc:	81 1d       	adc	r24, r1
    10de:	08 95       	ret

000010e0 <__fp_inf>:
    10e0:	97 f9       	bld	r25, 7
    10e2:	9f 67       	ori	r25, 0x7F	; 127
    10e4:	80 e8       	ldi	r24, 0x80	; 128
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	08 95       	ret

000010ec <__fp_nan>:
    10ec:	9f ef       	ldi	r25, 0xFF	; 255
    10ee:	80 ec       	ldi	r24, 0xC0	; 192
    10f0:	08 95       	ret

000010f2 <__fp_pscA>:
    10f2:	00 24       	eor	r0, r0
    10f4:	0a 94       	dec	r0
    10f6:	16 16       	cp	r1, r22
    10f8:	17 06       	cpc	r1, r23
    10fa:	18 06       	cpc	r1, r24
    10fc:	09 06       	cpc	r0, r25
    10fe:	08 95       	ret

00001100 <__fp_pscB>:
    1100:	00 24       	eor	r0, r0
    1102:	0a 94       	dec	r0
    1104:	12 16       	cp	r1, r18
    1106:	13 06       	cpc	r1, r19
    1108:	14 06       	cpc	r1, r20
    110a:	05 06       	cpc	r0, r21
    110c:	08 95       	ret

0000110e <__fp_round>:
    110e:	09 2e       	mov	r0, r25
    1110:	03 94       	inc	r0
    1112:	00 0c       	add	r0, r0
    1114:	11 f4       	brne	.+4      	; 0x111a <__fp_round+0xc>
    1116:	88 23       	and	r24, r24
    1118:	52 f0       	brmi	.+20     	; 0x112e <__fp_round+0x20>
    111a:	bb 0f       	add	r27, r27
    111c:	40 f4       	brcc	.+16     	; 0x112e <__fp_round+0x20>
    111e:	bf 2b       	or	r27, r31
    1120:	11 f4       	brne	.+4      	; 0x1126 <__fp_round+0x18>
    1122:	60 ff       	sbrs	r22, 0
    1124:	04 c0       	rjmp	.+8      	; 0x112e <__fp_round+0x20>
    1126:	6f 5f       	subi	r22, 0xFF	; 255
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	8f 4f       	sbci	r24, 0xFF	; 255
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	08 95       	ret

00001130 <__fp_split3>:
    1130:	57 fd       	sbrc	r21, 7
    1132:	90 58       	subi	r25, 0x80	; 128
    1134:	44 0f       	add	r20, r20
    1136:	55 1f       	adc	r21, r21
    1138:	59 f0       	breq	.+22     	; 0x1150 <__fp_splitA+0x10>
    113a:	5f 3f       	cpi	r21, 0xFF	; 255
    113c:	71 f0       	breq	.+28     	; 0x115a <__fp_splitA+0x1a>
    113e:	47 95       	ror	r20

00001140 <__fp_splitA>:
    1140:	88 0f       	add	r24, r24
    1142:	97 fb       	bst	r25, 7
    1144:	99 1f       	adc	r25, r25
    1146:	61 f0       	breq	.+24     	; 0x1160 <__fp_splitA+0x20>
    1148:	9f 3f       	cpi	r25, 0xFF	; 255
    114a:	79 f0       	breq	.+30     	; 0x116a <__fp_splitA+0x2a>
    114c:	87 95       	ror	r24
    114e:	08 95       	ret
    1150:	12 16       	cp	r1, r18
    1152:	13 06       	cpc	r1, r19
    1154:	14 06       	cpc	r1, r20
    1156:	55 1f       	adc	r21, r21
    1158:	f2 cf       	rjmp	.-28     	; 0x113e <__fp_split3+0xe>
    115a:	46 95       	lsr	r20
    115c:	f1 df       	rcall	.-30     	; 0x1140 <__fp_splitA>
    115e:	08 c0       	rjmp	.+16     	; 0x1170 <__fp_splitA+0x30>
    1160:	16 16       	cp	r1, r22
    1162:	17 06       	cpc	r1, r23
    1164:	18 06       	cpc	r1, r24
    1166:	99 1f       	adc	r25, r25
    1168:	f1 cf       	rjmp	.-30     	; 0x114c <__fp_splitA+0xc>
    116a:	86 95       	lsr	r24
    116c:	71 05       	cpc	r23, r1
    116e:	61 05       	cpc	r22, r1
    1170:	08 94       	sec
    1172:	08 95       	ret

00001174 <__fp_zero>:
    1174:	e8 94       	clt

00001176 <__fp_szero>:
    1176:	bb 27       	eor	r27, r27
    1178:	66 27       	eor	r22, r22
    117a:	77 27       	eor	r23, r23
    117c:	cb 01       	movw	r24, r22
    117e:	97 f9       	bld	r25, 7
    1180:	08 95       	ret

00001182 <__mulsf3>:
    1182:	0b d0       	rcall	.+22     	; 0x119a <__mulsf3x>
    1184:	c4 cf       	rjmp	.-120    	; 0x110e <__fp_round>
    1186:	b5 df       	rcall	.-150    	; 0x10f2 <__fp_pscA>
    1188:	28 f0       	brcs	.+10     	; 0x1194 <__mulsf3+0x12>
    118a:	ba df       	rcall	.-140    	; 0x1100 <__fp_pscB>
    118c:	18 f0       	brcs	.+6      	; 0x1194 <__mulsf3+0x12>
    118e:	95 23       	and	r25, r21
    1190:	09 f0       	breq	.+2      	; 0x1194 <__mulsf3+0x12>
    1192:	a6 cf       	rjmp	.-180    	; 0x10e0 <__fp_inf>
    1194:	ab cf       	rjmp	.-170    	; 0x10ec <__fp_nan>
    1196:	11 24       	eor	r1, r1
    1198:	ee cf       	rjmp	.-36     	; 0x1176 <__fp_szero>

0000119a <__mulsf3x>:
    119a:	ca df       	rcall	.-108    	; 0x1130 <__fp_split3>
    119c:	a0 f3       	brcs	.-24     	; 0x1186 <__mulsf3+0x4>

0000119e <__mulsf3_pse>:
    119e:	95 9f       	mul	r25, r21
    11a0:	d1 f3       	breq	.-12     	; 0x1196 <__mulsf3+0x14>
    11a2:	95 0f       	add	r25, r21
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	55 1f       	adc	r21, r21
    11a8:	62 9f       	mul	r22, r18
    11aa:	f0 01       	movw	r30, r0
    11ac:	72 9f       	mul	r23, r18
    11ae:	bb 27       	eor	r27, r27
    11b0:	f0 0d       	add	r31, r0
    11b2:	b1 1d       	adc	r27, r1
    11b4:	63 9f       	mul	r22, r19
    11b6:	aa 27       	eor	r26, r26
    11b8:	f0 0d       	add	r31, r0
    11ba:	b1 1d       	adc	r27, r1
    11bc:	aa 1f       	adc	r26, r26
    11be:	64 9f       	mul	r22, r20
    11c0:	66 27       	eor	r22, r22
    11c2:	b0 0d       	add	r27, r0
    11c4:	a1 1d       	adc	r26, r1
    11c6:	66 1f       	adc	r22, r22
    11c8:	82 9f       	mul	r24, r18
    11ca:	22 27       	eor	r18, r18
    11cc:	b0 0d       	add	r27, r0
    11ce:	a1 1d       	adc	r26, r1
    11d0:	62 1f       	adc	r22, r18
    11d2:	73 9f       	mul	r23, r19
    11d4:	b0 0d       	add	r27, r0
    11d6:	a1 1d       	adc	r26, r1
    11d8:	62 1f       	adc	r22, r18
    11da:	83 9f       	mul	r24, r19
    11dc:	a0 0d       	add	r26, r0
    11de:	61 1d       	adc	r22, r1
    11e0:	22 1f       	adc	r18, r18
    11e2:	74 9f       	mul	r23, r20
    11e4:	33 27       	eor	r19, r19
    11e6:	a0 0d       	add	r26, r0
    11e8:	61 1d       	adc	r22, r1
    11ea:	23 1f       	adc	r18, r19
    11ec:	84 9f       	mul	r24, r20
    11ee:	60 0d       	add	r22, r0
    11f0:	21 1d       	adc	r18, r1
    11f2:	82 2f       	mov	r24, r18
    11f4:	76 2f       	mov	r23, r22
    11f6:	6a 2f       	mov	r22, r26
    11f8:	11 24       	eor	r1, r1
    11fa:	9f 57       	subi	r25, 0x7F	; 127
    11fc:	50 40       	sbci	r21, 0x00	; 0
    11fe:	8a f0       	brmi	.+34     	; 0x1222 <__mulsf3_pse+0x84>
    1200:	e1 f0       	breq	.+56     	; 0x123a <__mulsf3_pse+0x9c>
    1202:	88 23       	and	r24, r24
    1204:	4a f0       	brmi	.+18     	; 0x1218 <__mulsf3_pse+0x7a>
    1206:	ee 0f       	add	r30, r30
    1208:	ff 1f       	adc	r31, r31
    120a:	bb 1f       	adc	r27, r27
    120c:	66 1f       	adc	r22, r22
    120e:	77 1f       	adc	r23, r23
    1210:	88 1f       	adc	r24, r24
    1212:	91 50       	subi	r25, 0x01	; 1
    1214:	50 40       	sbci	r21, 0x00	; 0
    1216:	a9 f7       	brne	.-22     	; 0x1202 <__mulsf3_pse+0x64>
    1218:	9e 3f       	cpi	r25, 0xFE	; 254
    121a:	51 05       	cpc	r21, r1
    121c:	70 f0       	brcs	.+28     	; 0x123a <__mulsf3_pse+0x9c>
    121e:	60 cf       	rjmp	.-320    	; 0x10e0 <__fp_inf>
    1220:	aa cf       	rjmp	.-172    	; 0x1176 <__fp_szero>
    1222:	5f 3f       	cpi	r21, 0xFF	; 255
    1224:	ec f3       	brlt	.-6      	; 0x1220 <__mulsf3_pse+0x82>
    1226:	98 3e       	cpi	r25, 0xE8	; 232
    1228:	dc f3       	brlt	.-10     	; 0x1220 <__mulsf3_pse+0x82>
    122a:	86 95       	lsr	r24
    122c:	77 95       	ror	r23
    122e:	67 95       	ror	r22
    1230:	b7 95       	ror	r27
    1232:	f7 95       	ror	r31
    1234:	e7 95       	ror	r30
    1236:	9f 5f       	subi	r25, 0xFF	; 255
    1238:	c1 f7       	brne	.-16     	; 0x122a <__mulsf3_pse+0x8c>
    123a:	fe 2b       	or	r31, r30
    123c:	88 0f       	add	r24, r24
    123e:	91 1d       	adc	r25, r1
    1240:	96 95       	lsr	r25
    1242:	87 95       	ror	r24
    1244:	97 f9       	bld	r25, 7
    1246:	08 95       	ret

00001248 <snprintf>:
    1248:	ae e0       	ldi	r26, 0x0E	; 14
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ea e2       	ldi	r30, 0x2A	; 42
    124e:	f9 e0       	ldi	r31, 0x09	; 9
    1250:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__prologue_saves__+0x1c>
    1254:	0d 89       	ldd	r16, Y+21	; 0x15
    1256:	1e 89       	ldd	r17, Y+22	; 0x16
    1258:	8f 89       	ldd	r24, Y+23	; 0x17
    125a:	98 8d       	ldd	r25, Y+24	; 0x18
    125c:	26 e0       	ldi	r18, 0x06	; 6
    125e:	2c 83       	std	Y+4, r18	; 0x04
    1260:	1a 83       	std	Y+2, r17	; 0x02
    1262:	09 83       	std	Y+1, r16	; 0x01
    1264:	97 ff       	sbrs	r25, 7
    1266:	02 c0       	rjmp	.+4      	; 0x126c <snprintf+0x24>
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e8       	ldi	r25, 0x80	; 128
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	9e 83       	std	Y+6, r25	; 0x06
    1270:	8d 83       	std	Y+5, r24	; 0x05
    1272:	ae 01       	movw	r20, r28
    1274:	45 5e       	subi	r20, 0xE5	; 229
    1276:	5f 4f       	sbci	r21, 0xFF	; 255
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	69 8d       	ldd	r22, Y+25	; 0x19
    127e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1280:	0e 94 76 09 	call	0x12ec	; 0x12ec <vfprintf>
    1284:	4d 81       	ldd	r20, Y+5	; 0x05
    1286:	5e 81       	ldd	r21, Y+6	; 0x06
    1288:	57 fd       	sbrc	r21, 7
    128a:	0a c0       	rjmp	.+20     	; 0x12a0 <snprintf+0x58>
    128c:	2f 81       	ldd	r18, Y+7	; 0x07
    128e:	38 85       	ldd	r19, Y+8	; 0x08
    1290:	42 17       	cp	r20, r18
    1292:	53 07       	cpc	r21, r19
    1294:	0c f4       	brge	.+2      	; 0x1298 <snprintf+0x50>
    1296:	9a 01       	movw	r18, r20
    1298:	02 0f       	add	r16, r18
    129a:	13 1f       	adc	r17, r19
    129c:	f8 01       	movw	r30, r16
    129e:	10 82       	st	Z, r1
    12a0:	2e 96       	adiw	r28, 0x0e	; 14
    12a2:	e4 e0       	ldi	r30, 0x04	; 4
    12a4:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__epilogue_restores__+0x1c>

000012a8 <sprintf>:
    12a8:	ae e0       	ldi	r26, 0x0E	; 14
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	ea e5       	ldi	r30, 0x5A	; 90
    12ae:	f9 e0       	ldi	r31, 0x09	; 9
    12b0:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__prologue_saves__+0x1c>
    12b4:	0d 89       	ldd	r16, Y+21	; 0x15
    12b6:	1e 89       	ldd	r17, Y+22	; 0x16
    12b8:	86 e0       	ldi	r24, 0x06	; 6
    12ba:	8c 83       	std	Y+4, r24	; 0x04
    12bc:	1a 83       	std	Y+2, r17	; 0x02
    12be:	09 83       	std	Y+1, r16	; 0x01
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	9f e7       	ldi	r25, 0x7F	; 127
    12c4:	9e 83       	std	Y+6, r25	; 0x06
    12c6:	8d 83       	std	Y+5, r24	; 0x05
    12c8:	ae 01       	movw	r20, r28
    12ca:	47 5e       	subi	r20, 0xE7	; 231
    12cc:	5f 4f       	sbci	r21, 0xFF	; 255
    12ce:	ce 01       	movw	r24, r28
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	6f 89       	ldd	r22, Y+23	; 0x17
    12d4:	78 8d       	ldd	r23, Y+24	; 0x18
    12d6:	0e 94 76 09 	call	0x12ec	; 0x12ec <vfprintf>
    12da:	ef 81       	ldd	r30, Y+7	; 0x07
    12dc:	f8 85       	ldd	r31, Y+8	; 0x08
    12de:	e0 0f       	add	r30, r16
    12e0:	f1 1f       	adc	r31, r17
    12e2:	10 82       	st	Z, r1
    12e4:	2e 96       	adiw	r28, 0x0e	; 14
    12e6:	e4 e0       	ldi	r30, 0x04	; 4
    12e8:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__epilogue_restores__+0x1c>

000012ec <vfprintf>:
    12ec:	ad e0       	ldi	r26, 0x0D	; 13
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ec e7       	ldi	r30, 0x7C	; 124
    12f2:	f9 e0       	ldi	r31, 0x09	; 9
    12f4:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__prologue_saves__>
    12f8:	3c 01       	movw	r6, r24
    12fa:	7d 87       	std	Y+13, r23	; 0x0d
    12fc:	6c 87       	std	Y+12, r22	; 0x0c
    12fe:	5a 01       	movw	r10, r20
    1300:	fc 01       	movw	r30, r24
    1302:	17 82       	std	Z+7, r1	; 0x07
    1304:	16 82       	std	Z+6, r1	; 0x06
    1306:	83 81       	ldd	r24, Z+3	; 0x03
    1308:	81 ff       	sbrs	r24, 1
    130a:	c8 c1       	rjmp	.+912    	; 0x169c <vfprintf+0x3b0>
    130c:	2e 01       	movw	r4, r28
    130e:	08 94       	sec
    1310:	41 1c       	adc	r4, r1
    1312:	51 1c       	adc	r5, r1
    1314:	f3 01       	movw	r30, r6
    1316:	93 81       	ldd	r25, Z+3	; 0x03
    1318:	ec 85       	ldd	r30, Y+12	; 0x0c
    131a:	fd 85       	ldd	r31, Y+13	; 0x0d
    131c:	93 fd       	sbrc	r25, 3
    131e:	85 91       	lpm	r24, Z+
    1320:	93 ff       	sbrs	r25, 3
    1322:	81 91       	ld	r24, Z+
    1324:	fd 87       	std	Y+13, r31	; 0x0d
    1326:	ec 87       	std	Y+12, r30	; 0x0c
    1328:	88 23       	and	r24, r24
    132a:	09 f4       	brne	.+2      	; 0x132e <vfprintf+0x42>
    132c:	b3 c1       	rjmp	.+870    	; 0x1694 <vfprintf+0x3a8>
    132e:	85 32       	cpi	r24, 0x25	; 37
    1330:	41 f4       	brne	.+16     	; 0x1342 <vfprintf+0x56>
    1332:	93 fd       	sbrc	r25, 3
    1334:	85 91       	lpm	r24, Z+
    1336:	93 ff       	sbrs	r25, 3
    1338:	81 91       	ld	r24, Z+
    133a:	fd 87       	std	Y+13, r31	; 0x0d
    133c:	ec 87       	std	Y+12, r30	; 0x0c
    133e:	85 32       	cpi	r24, 0x25	; 37
    1340:	29 f4       	brne	.+10     	; 0x134c <vfprintf+0x60>
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	b3 01       	movw	r22, r6
    1346:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <fputc>
    134a:	e4 cf       	rjmp	.-56     	; 0x1314 <vfprintf+0x28>
    134c:	ff 24       	eor	r15, r15
    134e:	ee 24       	eor	r14, r14
    1350:	10 e0       	ldi	r17, 0x00	; 0
    1352:	10 32       	cpi	r17, 0x20	; 32
    1354:	b0 f4       	brcc	.+44     	; 0x1382 <vfprintf+0x96>
    1356:	8b 32       	cpi	r24, 0x2B	; 43
    1358:	69 f0       	breq	.+26     	; 0x1374 <vfprintf+0x88>
    135a:	8c 32       	cpi	r24, 0x2C	; 44
    135c:	28 f4       	brcc	.+10     	; 0x1368 <vfprintf+0x7c>
    135e:	80 32       	cpi	r24, 0x20	; 32
    1360:	51 f0       	breq	.+20     	; 0x1376 <vfprintf+0x8a>
    1362:	83 32       	cpi	r24, 0x23	; 35
    1364:	71 f4       	brne	.+28     	; 0x1382 <vfprintf+0x96>
    1366:	0b c0       	rjmp	.+22     	; 0x137e <vfprintf+0x92>
    1368:	8d 32       	cpi	r24, 0x2D	; 45
    136a:	39 f0       	breq	.+14     	; 0x137a <vfprintf+0x8e>
    136c:	80 33       	cpi	r24, 0x30	; 48
    136e:	49 f4       	brne	.+18     	; 0x1382 <vfprintf+0x96>
    1370:	11 60       	ori	r17, 0x01	; 1
    1372:	2c c0       	rjmp	.+88     	; 0x13cc <vfprintf+0xe0>
    1374:	12 60       	ori	r17, 0x02	; 2
    1376:	14 60       	ori	r17, 0x04	; 4
    1378:	29 c0       	rjmp	.+82     	; 0x13cc <vfprintf+0xe0>
    137a:	18 60       	ori	r17, 0x08	; 8
    137c:	27 c0       	rjmp	.+78     	; 0x13cc <vfprintf+0xe0>
    137e:	10 61       	ori	r17, 0x10	; 16
    1380:	25 c0       	rjmp	.+74     	; 0x13cc <vfprintf+0xe0>
    1382:	17 fd       	sbrc	r17, 7
    1384:	2e c0       	rjmp	.+92     	; 0x13e2 <vfprintf+0xf6>
    1386:	28 2f       	mov	r18, r24
    1388:	20 53       	subi	r18, 0x30	; 48
    138a:	2a 30       	cpi	r18, 0x0A	; 10
    138c:	98 f4       	brcc	.+38     	; 0x13b4 <vfprintf+0xc8>
    138e:	16 ff       	sbrs	r17, 6
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <vfprintf+0xb6>
    1392:	8f 2d       	mov	r24, r15
    1394:	88 0f       	add	r24, r24
    1396:	f8 2e       	mov	r15, r24
    1398:	ff 0c       	add	r15, r15
    139a:	ff 0c       	add	r15, r15
    139c:	f8 0e       	add	r15, r24
    139e:	f2 0e       	add	r15, r18
    13a0:	15 c0       	rjmp	.+42     	; 0x13cc <vfprintf+0xe0>
    13a2:	8e 2d       	mov	r24, r14
    13a4:	88 0f       	add	r24, r24
    13a6:	e8 2e       	mov	r14, r24
    13a8:	ee 0c       	add	r14, r14
    13aa:	ee 0c       	add	r14, r14
    13ac:	e8 0e       	add	r14, r24
    13ae:	e2 0e       	add	r14, r18
    13b0:	10 62       	ori	r17, 0x20	; 32
    13b2:	0c c0       	rjmp	.+24     	; 0x13cc <vfprintf+0xe0>
    13b4:	8e 32       	cpi	r24, 0x2E	; 46
    13b6:	21 f4       	brne	.+8      	; 0x13c0 <vfprintf+0xd4>
    13b8:	16 fd       	sbrc	r17, 6
    13ba:	6c c1       	rjmp	.+728    	; 0x1694 <vfprintf+0x3a8>
    13bc:	10 64       	ori	r17, 0x40	; 64
    13be:	06 c0       	rjmp	.+12     	; 0x13cc <vfprintf+0xe0>
    13c0:	8c 36       	cpi	r24, 0x6C	; 108
    13c2:	11 f4       	brne	.+4      	; 0x13c8 <vfprintf+0xdc>
    13c4:	10 68       	ori	r17, 0x80	; 128
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <vfprintf+0xe0>
    13c8:	88 36       	cpi	r24, 0x68	; 104
    13ca:	59 f4       	brne	.+22     	; 0x13e2 <vfprintf+0xf6>
    13cc:	ec 85       	ldd	r30, Y+12	; 0x0c
    13ce:	fd 85       	ldd	r31, Y+13	; 0x0d
    13d0:	93 fd       	sbrc	r25, 3
    13d2:	85 91       	lpm	r24, Z+
    13d4:	93 ff       	sbrs	r25, 3
    13d6:	81 91       	ld	r24, Z+
    13d8:	fd 87       	std	Y+13, r31	; 0x0d
    13da:	ec 87       	std	Y+12, r30	; 0x0c
    13dc:	88 23       	and	r24, r24
    13de:	09 f0       	breq	.+2      	; 0x13e2 <vfprintf+0xf6>
    13e0:	b8 cf       	rjmp	.-144    	; 0x1352 <vfprintf+0x66>
    13e2:	98 2f       	mov	r25, r24
    13e4:	95 54       	subi	r25, 0x45	; 69
    13e6:	93 30       	cpi	r25, 0x03	; 3
    13e8:	18 f0       	brcs	.+6      	; 0x13f0 <vfprintf+0x104>
    13ea:	90 52       	subi	r25, 0x20	; 32
    13ec:	93 30       	cpi	r25, 0x03	; 3
    13ee:	38 f4       	brcc	.+14     	; 0x13fe <vfprintf+0x112>
    13f0:	24 e0       	ldi	r18, 0x04	; 4
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	a2 0e       	add	r10, r18
    13f6:	b3 1e       	adc	r11, r19
    13f8:	3f e3       	ldi	r19, 0x3F	; 63
    13fa:	39 83       	std	Y+1, r19	; 0x01
    13fc:	0f c0       	rjmp	.+30     	; 0x141c <vfprintf+0x130>
    13fe:	83 36       	cpi	r24, 0x63	; 99
    1400:	31 f0       	breq	.+12     	; 0x140e <vfprintf+0x122>
    1402:	83 37       	cpi	r24, 0x73	; 115
    1404:	81 f0       	breq	.+32     	; 0x1426 <vfprintf+0x13a>
    1406:	83 35       	cpi	r24, 0x53	; 83
    1408:	09 f0       	breq	.+2      	; 0x140c <vfprintf+0x120>
    140a:	5a c0       	rjmp	.+180    	; 0x14c0 <vfprintf+0x1d4>
    140c:	22 c0       	rjmp	.+68     	; 0x1452 <vfprintf+0x166>
    140e:	f5 01       	movw	r30, r10
    1410:	80 81       	ld	r24, Z
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	22 e0       	ldi	r18, 0x02	; 2
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	a2 0e       	add	r10, r18
    141a:	b3 1e       	adc	r11, r19
    141c:	21 e0       	ldi	r18, 0x01	; 1
    141e:	c2 2e       	mov	r12, r18
    1420:	d1 2c       	mov	r13, r1
    1422:	42 01       	movw	r8, r4
    1424:	14 c0       	rjmp	.+40     	; 0x144e <vfprintf+0x162>
    1426:	92 e0       	ldi	r25, 0x02	; 2
    1428:	29 2e       	mov	r2, r25
    142a:	31 2c       	mov	r3, r1
    142c:	2a 0c       	add	r2, r10
    142e:	3b 1c       	adc	r3, r11
    1430:	f5 01       	movw	r30, r10
    1432:	80 80       	ld	r8, Z
    1434:	91 80       	ldd	r9, Z+1	; 0x01
    1436:	16 ff       	sbrs	r17, 6
    1438:	03 c0       	rjmp	.+6      	; 0x1440 <vfprintf+0x154>
    143a:	6f 2d       	mov	r22, r15
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <vfprintf+0x158>
    1440:	6f ef       	ldi	r22, 0xFF	; 255
    1442:	7f ef       	ldi	r23, 0xFF	; 255
    1444:	c4 01       	movw	r24, r8
    1446:	0e 94 5f 0b 	call	0x16be	; 0x16be <strnlen>
    144a:	6c 01       	movw	r12, r24
    144c:	51 01       	movw	r10, r2
    144e:	1f 77       	andi	r17, 0x7F	; 127
    1450:	15 c0       	rjmp	.+42     	; 0x147c <vfprintf+0x190>
    1452:	82 e0       	ldi	r24, 0x02	; 2
    1454:	28 2e       	mov	r2, r24
    1456:	31 2c       	mov	r3, r1
    1458:	2a 0c       	add	r2, r10
    145a:	3b 1c       	adc	r3, r11
    145c:	f5 01       	movw	r30, r10
    145e:	80 80       	ld	r8, Z
    1460:	91 80       	ldd	r9, Z+1	; 0x01
    1462:	16 ff       	sbrs	r17, 6
    1464:	03 c0       	rjmp	.+6      	; 0x146c <vfprintf+0x180>
    1466:	6f 2d       	mov	r22, r15
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <vfprintf+0x184>
    146c:	6f ef       	ldi	r22, 0xFF	; 255
    146e:	7f ef       	ldi	r23, 0xFF	; 255
    1470:	c4 01       	movw	r24, r8
    1472:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <strnlen_P>
    1476:	6c 01       	movw	r12, r24
    1478:	10 68       	ori	r17, 0x80	; 128
    147a:	51 01       	movw	r10, r2
    147c:	13 fd       	sbrc	r17, 3
    147e:	1c c0       	rjmp	.+56     	; 0x14b8 <vfprintf+0x1cc>
    1480:	06 c0       	rjmp	.+12     	; 0x148e <vfprintf+0x1a2>
    1482:	80 e2       	ldi	r24, 0x20	; 32
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	b3 01       	movw	r22, r6
    1488:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <fputc>
    148c:	ea 94       	dec	r14
    148e:	8e 2d       	mov	r24, r14
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	c8 16       	cp	r12, r24
    1494:	d9 06       	cpc	r13, r25
    1496:	a8 f3       	brcs	.-22     	; 0x1482 <vfprintf+0x196>
    1498:	0f c0       	rjmp	.+30     	; 0x14b8 <vfprintf+0x1cc>
    149a:	f4 01       	movw	r30, r8
    149c:	17 fd       	sbrc	r17, 7
    149e:	85 91       	lpm	r24, Z+
    14a0:	17 ff       	sbrs	r17, 7
    14a2:	81 91       	ld	r24, Z+
    14a4:	4f 01       	movw	r8, r30
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	b3 01       	movw	r22, r6
    14aa:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <fputc>
    14ae:	e1 10       	cpse	r14, r1
    14b0:	ea 94       	dec	r14
    14b2:	08 94       	sec
    14b4:	c1 08       	sbc	r12, r1
    14b6:	d1 08       	sbc	r13, r1
    14b8:	c1 14       	cp	r12, r1
    14ba:	d1 04       	cpc	r13, r1
    14bc:	71 f7       	brne	.-36     	; 0x149a <vfprintf+0x1ae>
    14be:	e7 c0       	rjmp	.+462    	; 0x168e <vfprintf+0x3a2>
    14c0:	84 36       	cpi	r24, 0x64	; 100
    14c2:	11 f0       	breq	.+4      	; 0x14c8 <vfprintf+0x1dc>
    14c4:	89 36       	cpi	r24, 0x69	; 105
    14c6:	51 f5       	brne	.+84     	; 0x151c <vfprintf+0x230>
    14c8:	f5 01       	movw	r30, r10
    14ca:	17 ff       	sbrs	r17, 7
    14cc:	07 c0       	rjmp	.+14     	; 0x14dc <vfprintf+0x1f0>
    14ce:	80 81       	ld	r24, Z
    14d0:	91 81       	ldd	r25, Z+1	; 0x01
    14d2:	a2 81       	ldd	r26, Z+2	; 0x02
    14d4:	b3 81       	ldd	r27, Z+3	; 0x03
    14d6:	24 e0       	ldi	r18, 0x04	; 4
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	08 c0       	rjmp	.+16     	; 0x14ec <vfprintf+0x200>
    14dc:	80 81       	ld	r24, Z
    14de:	91 81       	ldd	r25, Z+1	; 0x01
    14e0:	aa 27       	eor	r26, r26
    14e2:	97 fd       	sbrc	r25, 7
    14e4:	a0 95       	com	r26
    14e6:	ba 2f       	mov	r27, r26
    14e8:	22 e0       	ldi	r18, 0x02	; 2
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	a2 0e       	add	r10, r18
    14ee:	b3 1e       	adc	r11, r19
    14f0:	01 2f       	mov	r16, r17
    14f2:	0f 76       	andi	r16, 0x6F	; 111
    14f4:	b7 ff       	sbrs	r27, 7
    14f6:	08 c0       	rjmp	.+16     	; 0x1508 <vfprintf+0x21c>
    14f8:	b0 95       	com	r27
    14fa:	a0 95       	com	r26
    14fc:	90 95       	com	r25
    14fe:	81 95       	neg	r24
    1500:	9f 4f       	sbci	r25, 0xFF	; 255
    1502:	af 4f       	sbci	r26, 0xFF	; 255
    1504:	bf 4f       	sbci	r27, 0xFF	; 255
    1506:	00 68       	ori	r16, 0x80	; 128
    1508:	bc 01       	movw	r22, r24
    150a:	cd 01       	movw	r24, r26
    150c:	a2 01       	movw	r20, r4
    150e:	2a e0       	ldi	r18, 0x0A	; 10
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	0e 94 96 0b 	call	0x172c	; 0x172c <__ultoa_invert>
    1516:	d8 2e       	mov	r13, r24
    1518:	d4 18       	sub	r13, r4
    151a:	3f c0       	rjmp	.+126    	; 0x159a <vfprintf+0x2ae>
    151c:	85 37       	cpi	r24, 0x75	; 117
    151e:	21 f4       	brne	.+8      	; 0x1528 <vfprintf+0x23c>
    1520:	1f 7e       	andi	r17, 0xEF	; 239
    1522:	2a e0       	ldi	r18, 0x0A	; 10
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	20 c0       	rjmp	.+64     	; 0x1568 <vfprintf+0x27c>
    1528:	19 7f       	andi	r17, 0xF9	; 249
    152a:	8f 36       	cpi	r24, 0x6F	; 111
    152c:	a9 f0       	breq	.+42     	; 0x1558 <vfprintf+0x26c>
    152e:	80 37       	cpi	r24, 0x70	; 112
    1530:	20 f4       	brcc	.+8      	; 0x153a <vfprintf+0x24e>
    1532:	88 35       	cpi	r24, 0x58	; 88
    1534:	09 f0       	breq	.+2      	; 0x1538 <vfprintf+0x24c>
    1536:	ae c0       	rjmp	.+348    	; 0x1694 <vfprintf+0x3a8>
    1538:	0b c0       	rjmp	.+22     	; 0x1550 <vfprintf+0x264>
    153a:	80 37       	cpi	r24, 0x70	; 112
    153c:	21 f0       	breq	.+8      	; 0x1546 <vfprintf+0x25a>
    153e:	88 37       	cpi	r24, 0x78	; 120
    1540:	09 f0       	breq	.+2      	; 0x1544 <vfprintf+0x258>
    1542:	a8 c0       	rjmp	.+336    	; 0x1694 <vfprintf+0x3a8>
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <vfprintf+0x25c>
    1546:	10 61       	ori	r17, 0x10	; 16
    1548:	14 ff       	sbrs	r17, 4
    154a:	09 c0       	rjmp	.+18     	; 0x155e <vfprintf+0x272>
    154c:	14 60       	ori	r17, 0x04	; 4
    154e:	07 c0       	rjmp	.+14     	; 0x155e <vfprintf+0x272>
    1550:	14 ff       	sbrs	r17, 4
    1552:	08 c0       	rjmp	.+16     	; 0x1564 <vfprintf+0x278>
    1554:	16 60       	ori	r17, 0x06	; 6
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <vfprintf+0x278>
    1558:	28 e0       	ldi	r18, 0x08	; 8
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	05 c0       	rjmp	.+10     	; 0x1568 <vfprintf+0x27c>
    155e:	20 e1       	ldi	r18, 0x10	; 16
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <vfprintf+0x27c>
    1564:	20 e1       	ldi	r18, 0x10	; 16
    1566:	32 e0       	ldi	r19, 0x02	; 2
    1568:	f5 01       	movw	r30, r10
    156a:	17 ff       	sbrs	r17, 7
    156c:	07 c0       	rjmp	.+14     	; 0x157c <vfprintf+0x290>
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	44 e0       	ldi	r20, 0x04	; 4
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <vfprintf+0x29c>
    157c:	60 81       	ld	r22, Z
    157e:	71 81       	ldd	r23, Z+1	; 0x01
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	42 e0       	ldi	r20, 0x02	; 2
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	a4 0e       	add	r10, r20
    158a:	b5 1e       	adc	r11, r21
    158c:	a2 01       	movw	r20, r4
    158e:	0e 94 96 0b 	call	0x172c	; 0x172c <__ultoa_invert>
    1592:	d8 2e       	mov	r13, r24
    1594:	d4 18       	sub	r13, r4
    1596:	01 2f       	mov	r16, r17
    1598:	0f 77       	andi	r16, 0x7F	; 127
    159a:	06 ff       	sbrs	r16, 6
    159c:	09 c0       	rjmp	.+18     	; 0x15b0 <vfprintf+0x2c4>
    159e:	0e 7f       	andi	r16, 0xFE	; 254
    15a0:	df 14       	cp	r13, r15
    15a2:	30 f4       	brcc	.+12     	; 0x15b0 <vfprintf+0x2c4>
    15a4:	04 ff       	sbrs	r16, 4
    15a6:	06 c0       	rjmp	.+12     	; 0x15b4 <vfprintf+0x2c8>
    15a8:	02 fd       	sbrc	r16, 2
    15aa:	04 c0       	rjmp	.+8      	; 0x15b4 <vfprintf+0x2c8>
    15ac:	0f 7e       	andi	r16, 0xEF	; 239
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <vfprintf+0x2c8>
    15b0:	1d 2d       	mov	r17, r13
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <vfprintf+0x2ca>
    15b4:	1f 2d       	mov	r17, r15
    15b6:	80 2f       	mov	r24, r16
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	04 ff       	sbrs	r16, 4
    15bc:	0c c0       	rjmp	.+24     	; 0x15d6 <vfprintf+0x2ea>
    15be:	fe 01       	movw	r30, r28
    15c0:	ed 0d       	add	r30, r13
    15c2:	f1 1d       	adc	r31, r1
    15c4:	20 81       	ld	r18, Z
    15c6:	20 33       	cpi	r18, 0x30	; 48
    15c8:	11 f4       	brne	.+4      	; 0x15ce <vfprintf+0x2e2>
    15ca:	09 7e       	andi	r16, 0xE9	; 233
    15cc:	09 c0       	rjmp	.+18     	; 0x15e0 <vfprintf+0x2f4>
    15ce:	02 ff       	sbrs	r16, 2
    15d0:	06 c0       	rjmp	.+12     	; 0x15de <vfprintf+0x2f2>
    15d2:	1e 5f       	subi	r17, 0xFE	; 254
    15d4:	05 c0       	rjmp	.+10     	; 0x15e0 <vfprintf+0x2f4>
    15d6:	86 78       	andi	r24, 0x86	; 134
    15d8:	90 70       	andi	r25, 0x00	; 0
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <vfprintf+0x2f4>
    15de:	1f 5f       	subi	r17, 0xFF	; 255
    15e0:	80 2e       	mov	r8, r16
    15e2:	99 24       	eor	r9, r9
    15e4:	03 fd       	sbrc	r16, 3
    15e6:	12 c0       	rjmp	.+36     	; 0x160c <vfprintf+0x320>
    15e8:	00 ff       	sbrs	r16, 0
    15ea:	0d c0       	rjmp	.+26     	; 0x1606 <vfprintf+0x31a>
    15ec:	fd 2c       	mov	r15, r13
    15ee:	1e 15       	cp	r17, r14
    15f0:	50 f4       	brcc	.+20     	; 0x1606 <vfprintf+0x31a>
    15f2:	fe 0c       	add	r15, r14
    15f4:	f1 1a       	sub	r15, r17
    15f6:	1e 2d       	mov	r17, r14
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <vfprintf+0x31a>
    15fa:	80 e2       	ldi	r24, 0x20	; 32
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	b3 01       	movw	r22, r6
    1600:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <fputc>
    1604:	1f 5f       	subi	r17, 0xFF	; 255
    1606:	1e 15       	cp	r17, r14
    1608:	c0 f3       	brcs	.-16     	; 0x15fa <vfprintf+0x30e>
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <vfprintf+0x328>
    160c:	1e 15       	cp	r17, r14
    160e:	10 f4       	brcc	.+4      	; 0x1614 <vfprintf+0x328>
    1610:	e1 1a       	sub	r14, r17
    1612:	01 c0       	rjmp	.+2      	; 0x1616 <vfprintf+0x32a>
    1614:	ee 24       	eor	r14, r14
    1616:	84 fe       	sbrs	r8, 4
    1618:	0f c0       	rjmp	.+30     	; 0x1638 <vfprintf+0x34c>
    161a:	80 e3       	ldi	r24, 0x30	; 48
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	b3 01       	movw	r22, r6
    1620:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <fputc>
    1624:	82 fe       	sbrs	r8, 2
    1626:	1f c0       	rjmp	.+62     	; 0x1666 <vfprintf+0x37a>
    1628:	81 fe       	sbrs	r8, 1
    162a:	03 c0       	rjmp	.+6      	; 0x1632 <vfprintf+0x346>
    162c:	88 e5       	ldi	r24, 0x58	; 88
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	10 c0       	rjmp	.+32     	; 0x1652 <vfprintf+0x366>
    1632:	88 e7       	ldi	r24, 0x78	; 120
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0d c0       	rjmp	.+26     	; 0x1652 <vfprintf+0x366>
    1638:	c4 01       	movw	r24, r8
    163a:	86 78       	andi	r24, 0x86	; 134
    163c:	90 70       	andi	r25, 0x00	; 0
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	91 f0       	breq	.+36     	; 0x1666 <vfprintf+0x37a>
    1642:	81 fc       	sbrc	r8, 1
    1644:	02 c0       	rjmp	.+4      	; 0x164a <vfprintf+0x35e>
    1646:	80 e2       	ldi	r24, 0x20	; 32
    1648:	01 c0       	rjmp	.+2      	; 0x164c <vfprintf+0x360>
    164a:	8b e2       	ldi	r24, 0x2B	; 43
    164c:	07 fd       	sbrc	r16, 7
    164e:	8d e2       	ldi	r24, 0x2D	; 45
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	b3 01       	movw	r22, r6
    1654:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <fputc>
    1658:	06 c0       	rjmp	.+12     	; 0x1666 <vfprintf+0x37a>
    165a:	80 e3       	ldi	r24, 0x30	; 48
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	b3 01       	movw	r22, r6
    1660:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <fputc>
    1664:	fa 94       	dec	r15
    1666:	df 14       	cp	r13, r15
    1668:	c0 f3       	brcs	.-16     	; 0x165a <vfprintf+0x36e>
    166a:	da 94       	dec	r13
    166c:	f2 01       	movw	r30, r4
    166e:	ed 0d       	add	r30, r13
    1670:	f1 1d       	adc	r31, r1
    1672:	80 81       	ld	r24, Z
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	b3 01       	movw	r22, r6
    1678:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <fputc>
    167c:	dd 20       	and	r13, r13
    167e:	a9 f7       	brne	.-22     	; 0x166a <vfprintf+0x37e>
    1680:	06 c0       	rjmp	.+12     	; 0x168e <vfprintf+0x3a2>
    1682:	80 e2       	ldi	r24, 0x20	; 32
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	b3 01       	movw	r22, r6
    1688:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <fputc>
    168c:	ea 94       	dec	r14
    168e:	ee 20       	and	r14, r14
    1690:	c1 f7       	brne	.-16     	; 0x1682 <vfprintf+0x396>
    1692:	40 ce       	rjmp	.-896    	; 0x1314 <vfprintf+0x28>
    1694:	f3 01       	movw	r30, r6
    1696:	86 81       	ldd	r24, Z+6	; 0x06
    1698:	97 81       	ldd	r25, Z+7	; 0x07
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <vfprintf+0x3b4>
    169c:	8f ef       	ldi	r24, 0xFF	; 255
    169e:	9f ef       	ldi	r25, 0xFF	; 255
    16a0:	2d 96       	adiw	r28, 0x0d	; 13
    16a2:	e2 e1       	ldi	r30, 0x12	; 18
    16a4:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__epilogue_restores__>

000016a8 <strnlen_P>:
    16a8:	fc 01       	movw	r30, r24
    16aa:	05 90       	lpm	r0, Z+
    16ac:	61 50       	subi	r22, 0x01	; 1
    16ae:	70 40       	sbci	r23, 0x00	; 0
    16b0:	01 10       	cpse	r0, r1
    16b2:	d8 f7       	brcc	.-10     	; 0x16aa <strnlen_P+0x2>
    16b4:	80 95       	com	r24
    16b6:	90 95       	com	r25
    16b8:	8e 0f       	add	r24, r30
    16ba:	9f 1f       	adc	r25, r31
    16bc:	08 95       	ret

000016be <strnlen>:
    16be:	fc 01       	movw	r30, r24
    16c0:	61 50       	subi	r22, 0x01	; 1
    16c2:	70 40       	sbci	r23, 0x00	; 0
    16c4:	01 90       	ld	r0, Z+
    16c6:	01 10       	cpse	r0, r1
    16c8:	d8 f7       	brcc	.-10     	; 0x16c0 <strnlen+0x2>
    16ca:	80 95       	com	r24
    16cc:	90 95       	com	r25
    16ce:	8e 0f       	add	r24, r30
    16d0:	9f 1f       	adc	r25, r31
    16d2:	08 95       	ret

000016d4 <fputc>:
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	8c 01       	movw	r16, r24
    16de:	eb 01       	movw	r28, r22
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	81 ff       	sbrs	r24, 1
    16e4:	1b c0       	rjmp	.+54     	; 0x171c <fputc+0x48>
    16e6:	82 ff       	sbrs	r24, 2
    16e8:	0d c0       	rjmp	.+26     	; 0x1704 <fputc+0x30>
    16ea:	2e 81       	ldd	r18, Y+6	; 0x06
    16ec:	3f 81       	ldd	r19, Y+7	; 0x07
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	9d 81       	ldd	r25, Y+5	; 0x05
    16f2:	28 17       	cp	r18, r24
    16f4:	39 07       	cpc	r19, r25
    16f6:	64 f4       	brge	.+24     	; 0x1710 <fputc+0x3c>
    16f8:	e8 81       	ld	r30, Y
    16fa:	f9 81       	ldd	r31, Y+1	; 0x01
    16fc:	01 93       	st	Z+, r16
    16fe:	f9 83       	std	Y+1, r31	; 0x01
    1700:	e8 83       	st	Y, r30
    1702:	06 c0       	rjmp	.+12     	; 0x1710 <fputc+0x3c>
    1704:	e8 85       	ldd	r30, Y+8	; 0x08
    1706:	f9 85       	ldd	r31, Y+9	; 0x09
    1708:	80 2f       	mov	r24, r16
    170a:	09 95       	icall
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	31 f4       	brne	.+12     	; 0x171c <fputc+0x48>
    1710:	8e 81       	ldd	r24, Y+6	; 0x06
    1712:	9f 81       	ldd	r25, Y+7	; 0x07
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	9f 83       	std	Y+7, r25	; 0x07
    1718:	8e 83       	std	Y+6, r24	; 0x06
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <fputc+0x4c>
    171c:	0f ef       	ldi	r16, 0xFF	; 255
    171e:	1f ef       	ldi	r17, 0xFF	; 255
    1720:	c8 01       	movw	r24, r16
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	08 95       	ret

0000172c <__ultoa_invert>:
    172c:	fa 01       	movw	r30, r20
    172e:	aa 27       	eor	r26, r26
    1730:	28 30       	cpi	r18, 0x08	; 8
    1732:	51 f1       	breq	.+84     	; 0x1788 <__ultoa_invert+0x5c>
    1734:	20 31       	cpi	r18, 0x10	; 16
    1736:	81 f1       	breq	.+96     	; 0x1798 <__ultoa_invert+0x6c>
    1738:	e8 94       	clt
    173a:	6f 93       	push	r22
    173c:	6e 7f       	andi	r22, 0xFE	; 254
    173e:	6e 5f       	subi	r22, 0xFE	; 254
    1740:	7f 4f       	sbci	r23, 0xFF	; 255
    1742:	8f 4f       	sbci	r24, 0xFF	; 255
    1744:	9f 4f       	sbci	r25, 0xFF	; 255
    1746:	af 4f       	sbci	r26, 0xFF	; 255
    1748:	b1 e0       	ldi	r27, 0x01	; 1
    174a:	3e d0       	rcall	.+124    	; 0x17c8 <__ultoa_invert+0x9c>
    174c:	b4 e0       	ldi	r27, 0x04	; 4
    174e:	3c d0       	rcall	.+120    	; 0x17c8 <__ultoa_invert+0x9c>
    1750:	67 0f       	add	r22, r23
    1752:	78 1f       	adc	r23, r24
    1754:	89 1f       	adc	r24, r25
    1756:	9a 1f       	adc	r25, r26
    1758:	a1 1d       	adc	r26, r1
    175a:	68 0f       	add	r22, r24
    175c:	79 1f       	adc	r23, r25
    175e:	8a 1f       	adc	r24, r26
    1760:	91 1d       	adc	r25, r1
    1762:	a1 1d       	adc	r26, r1
    1764:	6a 0f       	add	r22, r26
    1766:	71 1d       	adc	r23, r1
    1768:	81 1d       	adc	r24, r1
    176a:	91 1d       	adc	r25, r1
    176c:	a1 1d       	adc	r26, r1
    176e:	20 d0       	rcall	.+64     	; 0x17b0 <__ultoa_invert+0x84>
    1770:	09 f4       	brne	.+2      	; 0x1774 <__ultoa_invert+0x48>
    1772:	68 94       	set
    1774:	3f 91       	pop	r19
    1776:	2a e0       	ldi	r18, 0x0A	; 10
    1778:	26 9f       	mul	r18, r22
    177a:	11 24       	eor	r1, r1
    177c:	30 19       	sub	r19, r0
    177e:	30 5d       	subi	r19, 0xD0	; 208
    1780:	31 93       	st	Z+, r19
    1782:	de f6       	brtc	.-74     	; 0x173a <__ultoa_invert+0xe>
    1784:	cf 01       	movw	r24, r30
    1786:	08 95       	ret
    1788:	46 2f       	mov	r20, r22
    178a:	47 70       	andi	r20, 0x07	; 7
    178c:	40 5d       	subi	r20, 0xD0	; 208
    178e:	41 93       	st	Z+, r20
    1790:	b3 e0       	ldi	r27, 0x03	; 3
    1792:	0f d0       	rcall	.+30     	; 0x17b2 <__ultoa_invert+0x86>
    1794:	c9 f7       	brne	.-14     	; 0x1788 <__ultoa_invert+0x5c>
    1796:	f6 cf       	rjmp	.-20     	; 0x1784 <__ultoa_invert+0x58>
    1798:	46 2f       	mov	r20, r22
    179a:	4f 70       	andi	r20, 0x0F	; 15
    179c:	40 5d       	subi	r20, 0xD0	; 208
    179e:	4a 33       	cpi	r20, 0x3A	; 58
    17a0:	18 f0       	brcs	.+6      	; 0x17a8 <__ultoa_invert+0x7c>
    17a2:	49 5d       	subi	r20, 0xD9	; 217
    17a4:	31 fd       	sbrc	r19, 1
    17a6:	40 52       	subi	r20, 0x20	; 32
    17a8:	41 93       	st	Z+, r20
    17aa:	02 d0       	rcall	.+4      	; 0x17b0 <__ultoa_invert+0x84>
    17ac:	a9 f7       	brne	.-22     	; 0x1798 <__ultoa_invert+0x6c>
    17ae:	ea cf       	rjmp	.-44     	; 0x1784 <__ultoa_invert+0x58>
    17b0:	b4 e0       	ldi	r27, 0x04	; 4
    17b2:	a6 95       	lsr	r26
    17b4:	97 95       	ror	r25
    17b6:	87 95       	ror	r24
    17b8:	77 95       	ror	r23
    17ba:	67 95       	ror	r22
    17bc:	ba 95       	dec	r27
    17be:	c9 f7       	brne	.-14     	; 0x17b2 <__ultoa_invert+0x86>
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	61 05       	cpc	r22, r1
    17c4:	71 05       	cpc	r23, r1
    17c6:	08 95       	ret
    17c8:	9b 01       	movw	r18, r22
    17ca:	ac 01       	movw	r20, r24
    17cc:	0a 2e       	mov	r0, r26
    17ce:	06 94       	lsr	r0
    17d0:	57 95       	ror	r21
    17d2:	47 95       	ror	r20
    17d4:	37 95       	ror	r19
    17d6:	27 95       	ror	r18
    17d8:	ba 95       	dec	r27
    17da:	c9 f7       	brne	.-14     	; 0x17ce <__ultoa_invert+0xa2>
    17dc:	62 0f       	add	r22, r18
    17de:	73 1f       	adc	r23, r19
    17e0:	84 1f       	adc	r24, r20
    17e2:	95 1f       	adc	r25, r21
    17e4:	a0 1d       	adc	r26, r0
    17e6:	08 95       	ret

000017e8 <__prologue_saves__>:
    17e8:	2f 92       	push	r2
    17ea:	3f 92       	push	r3
    17ec:	4f 92       	push	r4
    17ee:	5f 92       	push	r5
    17f0:	6f 92       	push	r6
    17f2:	7f 92       	push	r7
    17f4:	8f 92       	push	r8
    17f6:	9f 92       	push	r9
    17f8:	af 92       	push	r10
    17fa:	bf 92       	push	r11
    17fc:	cf 92       	push	r12
    17fe:	df 92       	push	r13
    1800:	ef 92       	push	r14
    1802:	ff 92       	push	r15
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	ca 1b       	sub	r28, r26
    1812:	db 0b       	sbc	r29, r27
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	09 94       	ijmp

00001820 <__epilogue_restores__>:
    1820:	2a 88       	ldd	r2, Y+18	; 0x12
    1822:	39 88       	ldd	r3, Y+17	; 0x11
    1824:	48 88       	ldd	r4, Y+16	; 0x10
    1826:	5f 84       	ldd	r5, Y+15	; 0x0f
    1828:	6e 84       	ldd	r6, Y+14	; 0x0e
    182a:	7d 84       	ldd	r7, Y+13	; 0x0d
    182c:	8c 84       	ldd	r8, Y+12	; 0x0c
    182e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1830:	aa 84       	ldd	r10, Y+10	; 0x0a
    1832:	b9 84       	ldd	r11, Y+9	; 0x09
    1834:	c8 84       	ldd	r12, Y+8	; 0x08
    1836:	df 80       	ldd	r13, Y+7	; 0x07
    1838:	ee 80       	ldd	r14, Y+6	; 0x06
    183a:	fd 80       	ldd	r15, Y+5	; 0x05
    183c:	0c 81       	ldd	r16, Y+4	; 0x04
    183e:	1b 81       	ldd	r17, Y+3	; 0x03
    1840:	aa 81       	ldd	r26, Y+2	; 0x02
    1842:	b9 81       	ldd	r27, Y+1	; 0x01
    1844:	ce 0f       	add	r28, r30
    1846:	d1 1d       	adc	r29, r1
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	ed 01       	movw	r28, r26
    1854:	08 95       	ret

00001856 <_exit>:
    1856:	f8 94       	cli

00001858 <__stop_program>:
    1858:	ff cf       	rjmp	.-2      	; 0x1858 <__stop_program>
